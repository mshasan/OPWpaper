{
    "collab_server" : "",
    "contents" : "getwd()\nsetwd(\"U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1\")\n#setwd(\"C:/Users/Apu-Jerrica/Google Drive/UGA/My R Packages/OPWeight\")\n\nlibrary(stringi)\nlibrary(OPWeight)       # library for the proposed method\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)      # for multiplots in the same page\nlibrary(xtable)\nlibrary(reshape2)       # library for the melt function\nlibrary(cowplot)        # plot_grid function\nlibrary(mvnfast)\t\t# fast generate multi variate normal\n#source(\"https://bioconductor.org/biocLite.R\")\n#biocLite(\"qvalue\")\nlibrary(qvalue)         # qvalue\n#biocLite(\"DESeq2\")\n#biocLite(\"IHW\")\nlibrary(IHW)\nlibrary(\"htmltools\")\nlibrary(\"devtools\")\n# install IHW\n#install_github(\"vladchimescu/lpsymphony\", subdir=\"lpsymphony\")\n#install_github(\"nignatiadis/IHW\")\n# install FDRreg, version on CRAN is outdated\n#install_github(repo= \"jgscott/FDRreg\", subdir=\"R_pkg/\", ref = \"a63cebae6faecb1fb0ebee634195296f39faa11b\")\n# Bioconductor prerequisites\n#source(\"http://bioconductor.org/biocLite.R\")\n#biocLite(c(\"genefilter\",\"DESeq2\",\"qvalue\",\"Biobase\",\n#           \"BiocParallel\",\"airway\",\"pasilla\", \"BiocStyle\"))\n# finally install this package\n#install_github(\"nignatiadis/IHWpaper\")\n#biocLite(\"IHWpaper\")\nlibrary(IHWpaper)\n#biocLite(\"genefilter\")\nlibrary(\"genefilter\")\nlibrary(tibble)       # data table\nlibrary(MASS)           # boc-cox transforamtion\n#devtools::install_github(\"hadley/lineprof\")\nlibrary(lineprof)       # check code performance\nlibrary(Rcpp)           # C++ library\nlibrary(wesanderson)  # for plot colors\n#colors <- wes_palette(\"Cavalcanti\")[1:4]\n#biocLite(\"DESeq2\")\nlibrary(\"DESeq2\")\nlibrary(car)\t\t# qqplot\nlibrary(abind)\n\n################################################################################\n# function to compare rank probbailities from three approahes: 1) sikmulation,\n# 2) exact fromual, and 3) normal approximation\n\n# inpout:----------------\n# ey = effect size\n# e.one = vary one test effect across all tests\n# m0 = number of null tests\n# m1 = number of alternative tests\n# effectType = type of effect size c(\"binary\",\"continuous\")\n# sampleSize = total number of sample generated (use sample size at least 100,000)\n\n# internal parameters:-----\n# m = total number of tests\n# ranks = sequesnce of ranks or index numbers\n# rank = rank of the tests per sample\n# probbailities from various approaches (see corresponding help files)\n\n# output:---------------\n# Data = proabbilities\n# or plots of the probabilities of ranks vs. ranks of the tests\n\n#===============================================================================\nranksProb_compare <- function(ey, e.one, m0, m1, sampleSize,\n                              effectType = c(\"binary\", \"continuous\"))\n{\n    m = m0 +m1\n    ranks <- 1:m\n    et = e.one\n\n    # simulation approach=======================================================\n    # compute rank of the tests\n    rank <- sapply(1:sampleSize, prob_rank_givenEffect_simu, ey = ey, e.one = e.one,\n                                    m0=m0, m1=m1, effectType = effectType)\n\n    # rank may generate missing valuse because of the large effcet size,\n    # therefore, to make a matplot equal vectors size are needed. This procedure\n    # will replace the missing value to make equal sized vector\n    # probability of rank of a null test\n    prob0 <- rep(NA, m)\n    prob0_x <- tapply(rank[1,], rank[1,], length)/sampleSize\n    prob0[as.numeric(names(prob0_x))] <- as.vector(prob0_x)\n\n    # probability of rank of an alternative test\n    prob1 <- rep(NA, m)\n    prob1_x <- tapply(rank[2,], rank[2,], length)/sampleSize\n    prob1[as.numeric(names(prob1_x))] <- as.vector(prob1_x)\n\n    # exact approach============================================================\n    # do not compute probability for a large number of tests\n    prob0_exact <- sapply(ranks, prob_rank_givenEffect_exact, et=0, ey=ey,\n                          nrep=10000, m0=m0, m1=m1, effectType = effectType)\n    prob1_exact <- sapply(ranks, prob_rank_givenEffect_exact, et=et, ey=ey,\n                          nrep=10000,m0=m0, m1=m1, effectType = effectType)\n\n    # normal approximation approcah=============================================\n    prob0_approx <- sapply(ranks, prob_rank_givenEffect_approx, et=0, ey=ey,\n                           nrep=10000, m0=m0, m1=m1, effectType = effectType)\n    prob1_approx <- sapply(ranks, prob_rank_givenEffect_approx, et=et, ey=ey,\n                           nrep=10000, m0=m0, m1=m1, effectType = effectType)\n\n    # nice plots================================================================\n    Data <- data.frame(ranks, prob0, prob1, prob0_exact, prob1_exact,\n                       prob0_approx, prob1_approx)\n\n    return(Data)\n}\n\n# applying function------------\nprobData <- ranksProb_compare(ey = 1, e.one = 1, m0=90, m1=10,\n                  sampleSize = sampleSize, effectType = \"binary\")\n\n\n# plots------------\ncolnames(probData) <- c(\"ranks\", \"SH0\",\"SH1\",\"EH0\",\"EH1\",\"AH0\",\"AH1\")\ndat <- melt(probData, id.var = \"ranks\")\ney_plot <- if(effectType == \"binary\"){ey\n} else {if(ey == 0){0} else {paste0(ey-1, \"-\", ey)}}\nggplot(dat, aes(x = ranks, y = value, group = variable, colour = variable)) +\n    geom_line(aes(color = variable), size = 1) +\n    labs(x = \"ranks\", y = \"p(rank | effect)\") +\n    guides(fill = guide_legend(title = NULL)) +\n    theme(legend.title = element_blank()) +\n    annotate(\"text\", x = 50, y = .011,\n             label = paste0(\"P(rank | effect = \", ey_plot,\")\"))\n\n\n\n\n\n#================================start of parrallelcomputing====================\n# null test size = c(20, 50, 75, 90, 99)\nsampleSize = 1000 #( use atleast 1,000,000)\neffect <- c(0, 1, 2)\n\n# continuous cases==============================================================\nprob_20_0_cont = parLapply(cl, effect, ranksProb_compare, e.one = 0, m0=20, m1=80, sampleSize = sampleSize, effectType = \"continuous\")\nprob_20_1_cont = parLapply(cl, effect, ranksProb_compare, e.one = 1, m0=20, m1=80, sampleSize = sampleSize, effectType = \"continuous\")\nprob_20_2_cont = parLapply(cl, effect, ranksProb_compare, e.one = 2, m0=20, m1=80, sampleSize = sampleSize, effectType = \"continuous\")\n\nprob_50_0_cont = parLapply(cl, effect, ranksProb_compare, e.one = 0, m0=50, m1=50, sampleSize = sampleSize, effectType = \"continuous\")\nprob_50_1_cont = parLapply(cl, effect, ranksProb_compare, e.one = 1, m0=50, m1=50, sampleSize = sampleSize, effectType = \"continuous\")\nprob_50_2_cont = parLapply(cl, effect, ranksProb_compare, e.one = 2, m0=50, m1=50, sampleSize = sampleSize, effectType = \"continuous\")\n\nprob_75_0_cont = parLapply(cl, effect, ranksProb_compare, e.one = 0, m0=75, m1=25, sampleSize = sampleSize, effectType = \"continuous\")\nprob_75_1_cont = parLapply(cl, effect, ranksProb_compare, e.one = 1, m0=75, m1=25, sampleSize = sampleSize, effectType = \"continuous\")\nprob_75_2_cont = parLapply(cl, effect, ranksProb_compare, e.one = 2, m0=75, m1=25, sampleSize = sampleSize, effectType = \"continuous\")\n\nprob_90_0_cont = parLapply(cl, effect, ranksProb_compare, e.one = 0, m0=90, m1=10, sampleSize = sampleSize, effectType = \"continuous\")\nprob_90_1_cont = parLapply(cl, effect, ranksProb_compare, e.one = 1, m0=90, m1=10, sampleSize = sampleSize, effectType = \"continuous\")\nprob_90_2_cont = parLapply(cl, effect, ranksProb_compare, e.one = 2, m0=90, m1=10, sampleSize = sampleSize, effectType = \"continuous\")\n\nprob_99_0_cont = parLapply(cl, effect, ranksProb_compare, e.one = 0, m0=99, m1=1, sampleSize = sampleSize, effectType = \"continuous\")\nprob_99_1_cont = parLapply(cl, effect, ranksProb_compare, e.one = 1, m0=99, m1=1, sampleSize = sampleSize, effectType = \"continuous\")\nprob_99_2_cont = parLapply(cl, effect, ranksProb_compare, e.one = 2, m0=99, m1=1, sampleSize = sampleSize, effectType = \"continuous\")\n\n\n\n# binary cases==================================================================\nprob_20_0_bin = parLapply(cl, effect, ranksProb_compare, e.one = 0, m0=20, m1=80, sampleSize = sampleSize, effectType = \"binary\")\nprob_20_1_bin = parLapply(cl, effect, ranksProb_compare, e.one = 1, m0=20, m1=80, sampleSize = sampleSize, effectType = \"binary\")\nprob_20_2_bin = parLapply(cl, effect, ranksProb_compare, e.one = 2, m0=20, m1=80, sampleSize = sampleSize, effectType = \"binary\")\n\nprob_50_0_bin = parLapply(cl, effect, ranksProb_compare, e.one = 0, m0=50, m1=50, sampleSize = sampleSize, effectType = \"binary\")\nprob_50_1_bin = parLapply(cl, effect, ranksProb_compare, e.one = 1, m0=50, m1=50, sampleSize = sampleSize, effectType = \"binary\")\nprob_50_2_bin = parLapply(cl, effect, ranksProb_compare, e.one = 2, m0=50, m1=50, sampleSize = sampleSize, effectType = \"binary\")\n\nprob_75_0_bin = parLapply(cl, effect, ranksProb_compare, e.one = 0, m0=75, m1=25, sampleSize = sampleSize, effectType = \"binary\")\nprob_75_1_bin = parLapply(cl, effect, ranksProb_compare, e.one = 1, m0=75, m1=25, sampleSize = sampleSize, effectType = \"binary\")\nprob_75_2_bin = parLapply(cl, effect, ranksProb_compare, e.one = 2, m0=75, m1=25, sampleSize = sampleSize, effectType = \"binary\")\n\nprob_90_0_bin = parLapply(cl, effect, ranksProb_compare, e.one = 0, m0=90, m1=10, sampleSize = sampleSize, effectType = \"binary\")\nprob_90_1_bin = parLapply(cl, effect, ranksProb_compare, e.one = 1, m0=90, m1=10, sampleSize = sampleSize, effectType = \"binary\")\nprob_90_2_bin = parLapply(cl, effect, ranksProb_compare, e.one = 2, m0=90, m1=10, sampleSize = sampleSize, effectType = \"binary\")\n\nprob_99_0_bin = parLapply(cl, effect, ranksProb_compare, e.one = 0, m0=99, m1=1, sampleSize = sampleSize, effectType = \"binary\")\nprob_99_1_bin = parLapply(cl, effect, ranksProb_compare, e.one = 1, m0=99, m1=1, sampleSize = sampleSize, effectType = \"binary\")\nprob_99_2_bin = parLapply(cl, effect, ranksProb_compare, e.one = 2, m0=99, m1=1, sampleSize = sampleSize, effectType = \"binary\")\n\n\n\n\n\n#===========================end of parallel computing===========================\n\n# this code is to load saved workspace from parallel computing\nload(\".../simu_prob_rank_givenEffect.RDATA\")\n\n\n\n#=======================probability plot for the main article===================\n# probability plols for the main article----------------------\n#prob_50_0_cont           # to get (ey=0, and e.one = 0)\n#prob_50_1_cont           # to get (ey~U(0, 1) and ey~U(1, 2) for e.one = 1)\n#prob_50_2_cont           # ey~U(0, 1) and e.one = 2\n\ndat00 <- prob_50_0_cont[[1]]\ncolnames(dat00) <- c(\"ranks\", \"SH0\",\"SH1\",\"EH0\",\"EH1\",\"AH0\",\"AH1\")\ndat00 <- melt(dat00, id.var=\"ranks\")\n\ndat01 <- prob_50_1_cont[[2]]\ncolnames(dat01) <- c(\"ranks\", \"SH0\",\"SH1\",\"EH0\",\"EH1\",\"AH0\",\"AH1\")\ndat01 <- melt(dat01, id.var=\"ranks\")\n\ndat12 <- prob_50_1_cont[[3]]\ncolnames(dat12) <- c(\"ranks\", \"SH0\",\"SH1\",\"EH0\",\"EH1\",\"AH0\",\"AH1\")\ndat12 <- melt(dat12, id.var=\"ranks\")\n\ndat02 <- prob_50_2_cont[[2]]\ncolnames(dat02) <- c(\"ranks\", \"SH0\",\"SH1\",\"EH0\",\"EH1\",\"AH0\",\"AH1\")\ndat02 <- melt(dat02,id.var=\"ranks\")\n\n\np00 <- ggplot(dat00, aes(x = ranks, y = value, group = variable,\n                       colour = variable)) +\n          geom_line(aes(linetype = variable), size = 1.5) +\n          labs(x = \"Ranks\", y = \"p(rank | effect)\", title = \"ey = 0, e.one = 0\") +\n          theme(legend.position=\"none\") +\n          annotate(\"text\", x=50, y=.011, label=\"P(rank | effect = 0)\")\n\n\np01 <- ggplot(dat01, aes(x = ranks, y = value, group = variable,\n                       colour = variable)) +\n          geom_line(aes(linetype = variable), size = 1.5) +\n          labs(x = \"Ranks\", y = \"p(rank | effect)\", title = \"ey ~ U(0, 1), e.one = 1\") +\n          theme(legend.position=\"none\") +\n          annotate(\"text\", x = c(50, 50), y = c(.005, .018),\n                   label = c(paste(sprintf('\\u2190'),\"P(rank | effect = 0)\"),\n\t\t\t\t\tpaste(\"P(rank | effect = e.one)\", sprintf('\\u2192'))))\n\np12 <- ggplot(dat12, aes(x = ranks, y = value, group = variable,\n                       colour = variable)) +\n          geom_line(aes(linetype = variable), size = 1.5) +\n          labs(x = \"Ranks\", y = \"p(rank | effect)\", title = \"ey ~ U(1, 2), e.one = 1\") +\n          theme(legend.position=\"none\") +\n          annotate(\"text\", x = c(60, 40), y=c(.001, .02),\n                   label = c(paste(sprintf('\\u2190'),\"P(rank | effect = 0)\"),\n\t\t\t\t\tpaste(\"P(rank | effect = e.one)\", sprintf('\\u2192'))))\n\np02 <- ggplot(dat02, aes(x = ranks, y = value, group = variable,\n                       colour = variable)) +\n          geom_line(aes(linetype = variable), size = 1.5) +\n          labs(x = \"Ranks\", y = \"p(rank | effect)\", title = \"ey ~ U(0, 1), e.one = 2\") +\n          theme(legend.title = element_blank(), legend.position=\"bottom\") +\n          annotate(\"text\", x = c(50, 40), y=c(.04, .15),\n                  label = c(\"P(rank | effect = 0)\",paste(sprintf('\\u2190'),\"P(rank | effect = e.one)\")))\n\n\n# extract the legend from one of the plots\nlegend_art <- get_legend(p02 + theme(legend.direction=\"horizontal\",\n                                 legend.position=\"bottom\"))\n\np02 = p02 +    theme(legend.position=\"none\")\n\n\np = plot_grid(p00, p01, p12, p02, nrow = 2, labels = letters[1:4], align = 'hv')\n# now add the title\ntitle <- ggdraw() + draw_label(\"Continuous: m0 = 50, m1 = 50\")\nplot_grid(title, p, legend_art, ncol = 1, rel_heights=c(0.1, 1, .1))\n\n#==========================end==================================================\n\n\n\n\n\n#=======================probability plot for the supplementry materials=========\n\n# Function to plots from the parallel computing outputs=========================\n# probability plols for the supplementry materials\nranksProb_plots <- function(m0, effectType = c(\"binary\", \"continuous\"))\n{\n    effType <- ifelse(effectType == \"binary\", \"_bin\", \"_cont\")\n    prow <- list()\n    for(j in 1:3)\n    {\n        e.one <- j-1\n        # make text into varriable name\n        probData_com <- eval(parse(text=paste0(\"prob_\",m0,\"_\",e.one, effType)))\n        g <- list()\n        for(i in 1:3)\n            {\n            probData <- probData_com[[i]]\n            colnames(probData) <- c(\"ranks\", \"SH0\",\"SH1\",\"EH0\",\"EH1\",\"AH0\",\"AH1\")\n            dat <- melt(probData, id.var = \"ranks\")\n\n            ey_val <- ifelse(effectType == \"binary\", i-1,\n                             ifelse(i==1, 0, paste0(\"U(\",i-2,\", \", i-1,\")\")))\n            eySm <- ifelse(effectType == \"binary\", \"ey = \", \"ey ~ \")\n\n            g[[i]] = ggplot(dat, aes(x = ranks, y = value, group = variable,\n                                     colour = variable)) +\n                geom_line(aes(linetype = variable), size = 1.5) +\n                labs(x = \"Ranks\", y = \"p(rank | effect)\", size = 20,\n                     subtitle = paste0(eySm, ey_val, \", e.one = \", e.one)) +\n                theme(legend.title = element_blank(),\n\t\t\taxis.title.x = element_text(size = rel(.7)),\n\t\t\taxis.title.y = element_text(size = rel(.7)))\n           }\n\n        # extract the legend from one of the plots\n        legend <- get_legend(g[[1]] + theme(legend.direction=\"horizontal\",\n                                            legend.position=\"bottom\"))\n\n        # arrange the three plots in a single row\n        prow[[j]] <- plot_grid(g[[1]] + theme(legend.position=\"none\"),\n                          g[[2]] + theme(legend.position=\"none\"),\n                          g[[3]] + theme(legend.position=\"none\"),\n                          align = 'hv', nrow = 1, labels = letters[(3*j-3+1):(3*j)])\n    }\n\n    \teffType2 <- ifelse(effectType == \"binary\", \"Binary: m0 = \", \"Continuous: m0 = \")\n    \tpp = plot_grid(prow[[1]], prow[[2]], prow[[3]], nrow = 3, align = 'hv')\n\t# now add the title\n\ttitle <- ggdraw() + draw_label(paste(effType2, m0, \", m1 = \", 100-m0))\n\tplots = plot_grid(title, pp, legend, ncol = 1, rel_heights=c(0.1, 1, .1))\n\n    return(list(plots))\n}\n\n# applying plot function========================================================\nnullSize <- c(20, 50, 75, 90, 99)\ncont_probs_plots <- lapply(nullSize, ranksProb_plots, effectType = \"continuous\")\nbin_probs_plots <- lapply(nullSize, ranksProb_plots, effectType = \"binary\")\n\n#================================end============================================\n\n\n\n\n\n\nload(\"simu_ranksProb_byEffect.RDATA\")\n# # save data\n# #---------------------------\ncolNames <- c(paste(\"null.2_ef\", filterEffectVec, sep=\"\"), paste(\"null.5_ef\", filterEffectVec,sep=\"\"),\n              paste(\"null.75_ef\",filterEffectVec, sep=\"\"), paste(\"null.9_ef\",filterEffectVec,sep=\"\"),\n              paste(\"null.99_ef\",filterEffectVec, sep=\"\"))\ndata_ProbRanks <- data.frame(ranksProb_byEffect_null.2, ranksProb_byEffect_null.5,\n                             ranksProb_byEffect_null.75, ranksProb_byEffect_null.9,\n                             ranksProb_byEffect_null.99)\ncolnames(data_ProbRanks) <- colNames\nwrite.csv(data_ProbRanks, file = \"ranksProb_byEffect_m10000.csv\", row.names = F)\n\n\n\n\n\n\n#==================== Start: Example of prob vs. weight=========================\n\nprob_weight_plots <- function(ey_index, null_index, m, ey, null, prob, weight)\n{\n    ranks = 1:m\n\n    prob_by_null = data.frame(ranks, prob[ , ey_index])\n    names(prob_by_null) <- c(\"ranks\", \"20%\", \"50%\", \"75%\", \"90%\")\n    prob_by_null_melt <- melt(prob_by_null, id.var = \"ranks\",\n                              variable.name = \"null prop.\")\n\n    prob_plot = ggplot(prob_by_null_melt, aes(x = prob_by_null_melt$ranks,\n                                              y = prob_by_null_melt$value, group = prob_by_null_melt$`null prop.`,\n                                              colour = prob_by_null_melt$`null prop.`)) +\n        geom_line(aes(linetype = prob_by_null_melt$`null prop.`), size = 1.5) +\n        labs(x = \"Ranks\", y = \"p(rank | effect)\", title = paste0(\"et = ey = \", ey))+\n        theme(legend.position=\"none\")\n\n\n    prob_by_effect <- data.frame(ranks, prob[ , null_index])\n    colnames(prob_by_effect) <- c(\"ranks\", \"0.6\", \"2.0\", \"5.0\")\n    prob_by_effect_melt <- melt(prob_by_effect, id.var = \"ranks\",\n                                variable.name = \"effect size\")\n    prob_plot_by_effect = ggplot(prob_by_effect_melt, aes(x = prob_by_effect_melt$ranks,\n                                                          y = prob_by_effect_melt$value, group = prob_by_effect_melt$`effect size`,\n                                                          colour = prob_by_effect_melt$`effect size`)) +\n        geom_line(aes(linetype = prob_by_effect_melt$`effect size`), size = 1.5) +\n        labs(x = \"Ranks\", y = \"p(rank | effect)\", title = paste0(\"null = \", null, \"%\"))+\n        theme(legend.position=\"none\")\n\n\n    weight_by_null = data.frame(ranks, weight[ , ey_index])\n    names(weight_by_null) <- c(\"ranks\", \"20%\", \"50%\", \"75%\", \"90%\")\n    weight_by_null_melt <- melt(weight_by_null, id.var = \"ranks\",\n                                variable.name = \"null prop.\")\n    weight_plot = ggplot(weight_by_null_melt, aes(x = weight_by_null_melt$ranks,\n                                                  y = weight_by_null_melt$value, group = weight_by_null_melt$`null prop.`,\n                                                  colour = weight_by_null_melt$`null prop.`)) +\n        geom_line(size = 1.5) +\n        labs(x = \"Ranks\", y = \"log(weight)\", color = \"null prop.\")+\n        theme(legend.direction = \"horizontal\", legend.position = \"bottom\")\n\n\n\n    weight_by_effect <- data.frame(ranks, weight[ , null_index])\n    colnames(weight_by_effect) <- c(\"ranks\", \"0.6\", \"2.0\", \"5.0\")\n    weight_by_effect_melt <- melt(weight_by_effect, id.var = \"ranks\",\n                                  variable.name = \"effect size\")\n    weight_plot_by_effect = ggplot(weight_by_effect_melt, aes(x = weight_by_effect_melt$ranks,\n                                                              y = weight_by_effect_melt$value,\n                                                              group = weight_by_effect_melt$`effect size`,\n                                                              colour = weight_by_effect_melt$`effect size`)) +\n        geom_line(size = 1.5) +\n        labs(x = \"Ranks\", y = \"log(weight)\", color = \"effect size (ey)\")+\n        theme(legend.direction = \"horizontal\", legend.position = \"bottom\")\n\n\n    pp <- plot_grid(prob_plot, prob_plot_by_effect, weight_plot, weight_plot_by_effect,\n                    nrow = 2, labels = c(\"a\", \"b\"), align = 'v')\n    title <- ggdraw() + draw_label(\"Continuous: probability and weight vs. rank\")\n    plots = plot_grid(title, pp, ncol = 1, rel_heights=c(.1, 1))\n\n    return(plots)\n\n}\n\n\nm = 10000\nranksProb <- read.csv(\"ranksProb_byEffect_m10000.csv\", h = TRUE)\nranksWeight <- read.csv(\"Weight_byEffect_bin_m10000.csv\",h = TRUE)\nranksWeight <- t(t(ranksWeight)/colSums(ranksWeight)*m)\n\n#ey_index <- c(6, 16, 26, 36)  # ey = 1\n#ey_index <- c(7, 17, 27, 37)  # ey = 2\n#null_index <- c(14, 17, 19)   # null = 50%\n#null_index <- c(34, 37, 39)   # null = 90%\n\n\n\ney2_null50 <- prob_weight_plots(ey_index = c(7, 17, 27, 37), null_index = c(14, 17, 19),\n                                m = 10000, ey = 2, null = 50, prob = ranksProb,\n                                weight = ranksWeight)\n\ney2_null90 <- prob_weight_plots(ey_index = c(7, 17, 27, 37), null_index = c(34, 37, 39),\n                                m = 10000, ey = 2, null = 90, prob = ranksProb,\n                                weight = ranksWeight)\n\ney1_null50 <- prob_weight_plots(ey_index = c(6, 16, 26, 36), null_index = c(14, 17, 19),\n                                m = 10000, ey = 1, null = 50, prob = ranksProb,\n                                weight = ranksWeight)\n\ney1_null90 <- prob_weight_plots(ey_index = c(6, 16, 26, 36), null_index = c(34, 37, 39),\n                                m = 10000, ey = 1, null = 90, prob = ranksProb,\n                                weight = ranksWeight)\n\n\n#==============end: Example of prob vs. weight==================================\n\n\n\n\n\n\n\n\n#===============================================================================\n# function of simu_fwer--------------\n\n# inpout:----------------\n# s = number of replication in a simulation\n# m = total number of hypothesis test\n# alphaVec = a vector of significance levels\n#\n# internal parameters:-----\n# pval = pvalues from null tests\n# pval_filter = filter pvalues from null tests\n# test = test statistics\n# filter = filter test statistics\n# dat = a data frame\n# OD = ordered data by filter statistics\n# odered.pvalue = ordered pvalue by filter statistics\n# nullprop = prportion of null\n# m0 = true null test size\n# m1 = true alternative test size\n# test_effect =  estimated true alternative test effects\n# prob_bin = binary ranks probablity\n# prob_cont = continuous ranks probability\n# w_bin = binary weight\n# w_cont = continuous weight\n#\n# output:---------------\n# a matrix of fwer for different methods\n#\n#===============================================================================-\n\nsimu_fwer <- function(s, m, alphaVec)\n    {\n        fwer_per_rep <- function(alpha)\n        {\n            pval <- runif(m)\n            pval_filter <- runif(m)\n            test = qnorm(pval, lower.tail = FALSE)\n            filter = qnorm(pval_filter, lower.tail = FALSE)\n\n            dat = tibble(test, pval, filter)\n\n            OD = dat[order(dat$filter, decreasing=TRUE), ]\n            odered.pvalue = OD$pval\n\n            nullprop = qvalue(pval)$pi0\n            m0 = ceiling(m*nullprop)\n            m1 = m - m0\n\n            model = lm(filter ~ test)\n\n            test_effect <- if(m1 == 0) {0\n            } else {sort(test, decreasing = TRUE)[1:m1]}\n\n            et_bin = median(test_effect, na.rm = TRUE)\n            et_cont = mean(test_effect, na.rm = TRUE)\n\n            ey_bin = model$coef[[1]] + model$coef[[2]]*et_bin\n            ey_cont = model$coef[[1]] + model$coef[[2]]*et_cont\n\n            prob_bin <-sapply(1:m, prob_rank_givenEffect, et = ey_bin,\n                              ey = ey_bin,m0 = m0, m1 = m1)\n            prob_cont <-sapply(1:m, prob_rank_givenEffect, et = ey_cont,\n                               ey = ey_cont, m0 = m0, m1 = m1)\n\n            w_bin <- weight_binary(alpha = alpha, et = et_bin, m = m, m1 = m1,\n                                   tail = 1, delInterval = .0001, ranksProb = prob_bin)\n            w_cont = weight_continuous(alpha = alpha, et = et_cont, m = m,\n                                       tail = 1, delInterval = .0001 , ranksProb = prob_cont)\n\n            ihw_fwer <- ihw(dat$pval, dat$filter, alpha = alpha,\n                            adjustment_type = \"bonferroni\")\n\n            bon = sum(pval <= alpha/m, na.rm = TRUE)\n            pro_bin = sum(odered.pvalue <= alpha*w_bin/m, na.rm = TRUE)\n            pro_cont = sum(odered.pvalue <= alpha*w_cont/m, na.rm = TRUE)\n            IHW <- rejections(ihw_fwer)\n\n            return(c(bon, pro_bin, pro_cont, IHW))\n        }\n\n        fwer_per_rep_mat = sapply(alphaVec, fwer_per_rep)\n        return(fwer_per_rep_mat)\n    }\n\n\n\n\nalphaVec = seq(.01, .1, .02)\nsimVal = 1:3  # in actual case use at least simVal = 1000\nfwer_mat = sapply(simVal, simu_fwer, m = 10000, alphaVec = alphaVec)\n#system.time(sapply(simVal, simu_fwer, m = 10000, alphaVec = alphaVec))\n\n\n# load saved data---------------------\n# this code is to load saved workspace from parallel computing\nload(\"U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/smu_fwer.RDATA\")\n\nfwer_by_alpha <- matrix(apply(fwer_mat, 1, mean), nrow = 4, byrow = FALSE)\n\n# IHW paper------------\nnull_folder <- system.file(\"simulation_benchmarks/result_files/ihw_bonf_null\",\n                           package = \"IHWpaper\")\nnull_sim <- bind_rows(lapply(file.path(null_folder,list.files(null_folder)), function(x) readRDS(x))) %>%\n    mutate(fdr_method = ifelse(fdr_method == \"IHW-Bonferroni E3\", \"IHW-Bonferroni\", fdr_method))\nnull_sim_val = null_sim$FWER[c(1, 7, 11, 15, 19)]\n#-----------end------------IHWpaper------------------\n\nalphaVal = seq(.01, .1, .02)\ndatError <- data.frame(alphaVal, t(fwer_by_alpha))\ncolnames(datError) <- c(\"alpha\",\"BON\",\"PRO_bin\",\"PRO_cont\", \"IHW\")\ndatError2 <- melt(datError, id.var=\"alpha\")\n\npanel_d = ggplot(datError2, aes(x = alpha, y = value, col=variable)) +\n      geom_line(size=1.5) +\n      geom_abline(linetype=\"dashed\") +\n      xlab(expression(bold(paste(\"Nominal \",alpha)))) +\n      ylab(\"FWER\")+\n      scale_x_continuous(limits = c(0.01,0.1), breaks=seq(0.01,0.09,length=5)) +\n      #ylim(0,0.9) +\n      theme(legend.title = element_blank())+\n      theme(axis.title = element_text(face=\"bold\"))+\n      theme(panel.background = element_rect(fill = 'white', colour = 'black'))\n\n#df = data.frame(colour=mycolours, last_vals=c(0.08,   0.085,   0.09), label=c(\"BON\",\"PRO_bin\",\"PRO_cont\"))\n#panel_d <- pretty_legend(panel_d, df, .092)\npanel_d\n\n\n\n\n#================end of FWER====================================================\n\n\n\n\n\n# function to generate uniform random number  for fixed mean\nrunif_by_mean <- function(mean, n)\n  {\n  sd = mean/2\n  uni_rv <- mean + sd*scale(runif(n, 0, 1))\n  return(as.vector(uni_rv))\n  }\n\nx = runif_by_mean(n = 100, mean = 3)\nsummary(x)\n\n\n# function to generate multivariate tests statistics by block\n# input: r=no. of test groups,eVec=effect vector,Sigma=corr matrix\n# output: test = multivariate test statistics\n#-------------------------------------------------------------------\ntest_by_block <- function(r, eVec, groupSize, Sigma)\n{\n  eSub <- eVec[(groupSize*r + 1 - groupSize):(groupSize*r)]\n  test <- as.vector(rmvn(1, eSub, Sigma, ncores = 50))\n  return(test)\n}\n\neVec = rep(2,50)\nS <- matrix(.9, 50, 50) + diag(50)*(1-.1)\t\t# test correlation matrix\ntestsStat = test_by_block(r=1, eVec, groupSize=50,  Sigma)\n\n  ################################################################################################################\n  #----------------------fun.FwerPowerFdrPower----------------------------\n#function to compute Simulated FWER, POWER, and FDR by effect size\n#-------------------------------------------------------------------------------------------------------\n# Input:\n#=============\n# i = i-th effect\n# simu = number of simulation\n# null =  proportion of null hypothesis\n# corr = test correlation\n# random = 0, test effect = filter effect; 1 if test effect~N(filter effect, filter effect/2)\n# alpha = FWER level\n# filterEffectVec =  different effect size (10 values)\n# datWeightByNull = weight matrix (10000 by 40) for various null=c(20,50,90,99)% computed before;\n# \t\t\tm=10,000 and effect = filterEffectVec*4 = (10 effects)*(4 null scenerios)=40\n\n#output:\n#=============\n# FwerPowerFdr = A 16 by 10 matrix consits of simulated FWER(first 4 rows), POWER (2nd 4 rows),\n# FDR (3rd 4 rows) and FDRPower(last 4 rows) for 10 different effect sizes\n#-----------------------------------------------------------------------------------------------------\n\nfwerPowerFdrPower <- function(i, simu, null, corr = 0, cv = 0, alpha = .05,\n                              groupSize = 100, effectType = c(\"continuous\", \"binary\"),\n                              filterEffectVec, datWeightByNull)\n    {\n        W = datWeightByNull[ , i]\n        m = length(W)\n        weight_pro <- if(sum(W)==0){rep(1, m)} else {W/sum(W)*m}\n        ey <- filterEffectVec[i]\n        m0 <- ceiling(m*null)\n        m1 <- m - m0\n\n        if(effectType == \"continuous\"){\n            xf <- as.vector(runif_by_mean(n = m, mean = ey))\n        } else {\n            xf <- rep(ey, m)\n        }\n\n        xt <- if(cv == 0){xf} else {rnorm(m, ey, cv*ey)}\n        Sigma <- matrix(corr, groupSize, groupSize) + diag(groupSize)*(1 - corr)\n\n\n        fwerPowerFdrPower_simu <- function(s)\n        {\n            H <- rbinom(m, 1, 1 - null)\n            ef <- H*xf\n            et <- H*xt\n            mGrp = m/groupSize\n\n            test <- if(corr == 0) {rnorm(m, et, 1)\n            } else {as.vector(sapply(1:mGrp, test_by_block, eVec = et,\n                                     groupSize = groupSize, Sigma = Sigma))}\n\n            filter <- if(corr == 0) {rnorm(m, ef, 1)\n            } else {as.vector(sapply(1:mGrp, test_by_block, eVec = ef,\n                                     groupSize = groupSize, Sigma = Sigma))}\n\n            pval <- pnorm(test, lower.tail = FALSE)\n\n            dat = tibble(test, pval, et, filter)\n            OD = dat[order(dat$filter, decreasing = TRUE), ]\n\n            weight_rdw <- roeder_wasserman_weight(pvalue = OD$pval, alpha = alpha)\n            ihw_fwer <- ihw(OD$pval, OD$filter, alpha = alpha, adjustment_type = \"bonferroni\")\n            ihw_fdr <-  ihw(OD$pval, OD$filter, alpha = alpha, adjustment_type = \"BH\")\n\n            rej_pro <- OD$pval <= alpha*weight_pro/m\n            rej_bon <- OD$pval <= alpha/m\n            rej_rdw <- OD$pval <= alpha*weight_rdw/m\n            rej_ihwFwer <- adj_pvalues(ihw_fwer) <= alpha\n\n            n_null <- max(1, sum(OD$et == 0, na.rm = TRUE))\n            n_alt <-  max(1, sum(OD$et != 0, na.rm = TRUE))\n\n            FWER_pro <- sum(rej_pro[OD$et == 0])\n            FWER_bon <- sum(rej_bon[OD$et == 0])\n            FWER_rdw <- sum(rej_rdw[OD$et == 0])\n            FWER_ihw <- sum(rej_ihwFwer[OD$et == 0])\n\n            POWER_pro <- sum(rej_pro[OD$et != 0])/n_alt\n            POWER_bon <- sum(rej_bon[OD$et != 0])/n_alt\n            POWER_rdw <- sum(rej_rdw[OD$et != 0])/n_alt\n            POWER_ihw <- sum(rej_ihwFwer[OD$et != 0])/n_alt\n\n            adjPval_pro <- p.adjust(OD$pval/weight_pro, method=\"BH\")\n            adjPval_bon <- p.adjust(OD$pval, method=\"BH\")\n            adjPval_rdw <- p.adjust(OD$pval/weight_rdw, method=\"BH\")\n            adjPval_ihw <- adj_pvalues(ihw_fdr)\n\n            FDR_pro <- sum(adjPval_pro[OD$et == 0] <= alpha)/max(1, sum(adjPval_pro <= alpha))\n            FDR_bh  <- sum(adjPval_bon[OD$et == 0] <= alpha)/max(1, sum(adjPval_bon <= alpha))\n            FDR_rdw <- sum(adjPval_rdw[OD$et == 0] <= alpha)/max(1, sum(adjPval_rdw <= alpha))\n            FDR_ihw <- sum(adjPval_ihw[OD$et == 0] <= alpha)/max(1, rejections(ihw_fdr))\n\n            FDR_POWER_pro <- sum(adjPval_pro[OD$et != 0] <= alpha)/n_alt\n            FDR_POWER_bh  <- sum(adjPval_bon[OD$et != 0] <= alpha)/n_alt\n            FDR_POWER_rdw <- sum(adjPval_rdw[OD$et != 0] <= alpha)/n_alt\n            FDR_POWER_ihw <- sum(adjPval_ihw[OD$et != 0] <= alpha)/n_alt\n\n            return(c(FWER_pro, FWER_bon, FWER_rdw, FWER_ihw,\n                     POWER_pro, POWER_bon, POWER_rdw, POWER_ihw,\n                     FDR_pro, FDR_bh, FDR_rdw, FDR_ihw, FDR_POWER_pro,\n                     FDR_POWER_bh, FDR_POWER_rdw, FDR_POWER_ihw))\n        }\n\n        fwerPowerFdrPower_bysimu <- sapply(1:simu, fwerPowerFdrPower_simu)\n        fwerPowerFdrPower <- apply(fwerPowerFdrPower_bysimu, 1, mean, na.rm=TRUE)\n\n        return(fwerPowerFdrPower)\n\n    }\n\n\n\n# an example-----------------\n\ney_vec <- c(seq(0, 1, .2), 2, 3, 5, 8)\ndatWeight_cont <- read.csv(\"weight_byEffect_cont_m10000.csv\", h = TRUE)\nsimuVal = 1\n\nsystem.time(sapply(1, fwerPowerFdrPower, null=.5, corr = 0, cv = 0, alpha = .05,\n                               groupSize = 100, effectType = \"continuous\",\n                               ey_vec = ey_vec, datWeightByNull = datWeight_cont[ , 11:20 ]))\n\n\n\n# load data for continuous power----------------\n# this code is to load saved workspace from parallel computing\nload(\"U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_fwerPowerFdrPower_cont.RDATA\")\n\n\n# this part is for legend------------------------------------------------------\ndat_99 <- data.frame(ey_vec, t(FwerPowerFdrPower5e1[13:16,]))\ncolnames(dat_99) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_99_par <- melt(dat_99[1:6,], id.var = \"effectSize\")\n\np_99_par <- ggplot(dat_99_par, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"power\", title = \"null = 99%\") +\n    theme(legend.title = element_blank())\n\nlegend_power <- get_legend(p_99_par + theme(legend.direction = \"horizontal\",\n                                            legend.position = \"bottom\"))\n#--------------end: legend------------------------------------------------------\n\n\n# function to generate nice plots------------\nnice_plots <- function(filterEffectVec, FwerPowerFdrPower, fdr = TRUE, power = TRUE,\n                       null, low_eff_plot = FALSE)\n    {\n\n\n\n\n\n\n\n\n    if(fdr == FALSE & power == FALSE){\n            row_indx <- 1:4\n        } if else(fdr == FALSE & power == TRUE) {\n            row_indx <- 5:8\n        } if else(fdr == TRUE & power == FALSE){\n            row_indx <- 9:12\n        } else {\n            row_indx <- 13:16\n        }\n\n        dat <- data.frame(filterEffectVec, t(FwerPowerFdrPower[row_indx, ]))\n        colnames(dat) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\n\n        if(low_eff_plot == FALSE){\n            ylab = \"Power\"\n            dat_melt <- melt(dat, id.var = \"effectSize\")\n            plt <- ggplot(dat_melt, aes(x = effectSize, y = value, group = variable,\n                                      col = variable))\n        } else {\n            ylab = \"log(power)\"\n            dat <- dat[1:6,]\n            dat_melt <- melt(dat, id.var = \"effectSize\")\n            plt <- ggplot(dat_melt, aes(x = effectSize, y = log(value), group = variable,\n                                        col = variable))\n        }\n\n        titl <- paste0(\"null = \", null, \"%\")\n\n        plt = plt + geom_line(aes(linetype = variable), size = 1.5) +\n            labs(x = \"Mean filter effect (ey)\", y = ylab,\n                 title = if(low_eff_plot == FALSE){titl}) +\n            theme(legend.position = \"none\",\n\t\t\taxis.title.x = element_text(size = rel(.8)),\n\t\t\taxis.title.y = element_text(size = rel(.8)))\n\n        return(plt)\n    }\n\n\n\n# plots of power for mean filter effect(ey) = mean test effect(et) (i.e cv =0)\n#-------------------------------------------------------------------------------\ney_vec <- c(seq(0, 1, .2), 2, 3, 5, 8)\n\np_.5 <- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower2e1, fdr = TRUE, null = 50, low_eff_plot = FALSE)\np_.9 <- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower4e1, fdr = TRUE, null = 90, low_eff_plot = FALSE)\np_.99<- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower5e1, fdr = TRUE, null = 99, low_eff_plot = FALSE)\n\np_.5_low_ef <- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower2e1, fdr = TRUE, null = 50, low_eff_plot = TRUE)\np_.9_low_ef <- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower4e1, fdr = TRUE, null = 90, low_eff_plot = TRUE)\np_.99_low_ef<- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower5e1, fdr = TRUE, null = 99, low_eff_plot = TRUE)\n\np = plot_grid(p_.5, p_.9, p_.99, p_.5_low_ef, p_.9_low_ef, p_.99_low_ef, ncol = 3, labels = letters[1:3], align = 'hv')\ntitle <- ggdraw() + draw_label(\"Power: et = ey\")\nplot_grid(title, p, legend_power, ncol = 1, rel_heights=c(.1, 1, .1))\n\n\n# #####################################################################################################\n# # for dissertation table---------------------------\n#\n#\n# null_50 <- rbind(FwerPowerFdrPower2f1[c(13,16),], FwerPowerFdrPower2g1[c(13,16),], FwerPowerFdrPower2i1[c(13,16),])\n# null_90 <- rbind(FwerPowerFdrPower4f1[c(13,16),], FwerPowerFdrPower4g1[c(13,16),], FwerPowerFdrPower4i1[c(13,16),])\n# null_99 <- rbind(FwerPowerFdrPower5f1[c(13,16),], FwerPowerFdrPower5g1[c(13,16),], FwerPowerFdrPower5i1[c(13,16),])\n# Methods <- rep(c(\"PRO\", \"IHW\"), 9)\n# Cor <- rep(rep(c(.3, .5, .9), each = 2),3)\n# propH0 <- rep(c(50, 90, 99), each = 6)\n# filterEffectVec <- c(seq(0, 1, .2), 2, 3, 5, 8)\n#\n#\n# colname <- c(\"Methods\", paste(\"ef\", filterEffectVec, sep=\"\"))\n# dat <- data.frame(Methods, rbind(null_50, null_90, null_99))\n# colnames(dat) <- colname\n# dat <- dat[, c(1, 5:9)]\n#\n# print(xtable(dat,digits=3),include.rownames=FALSE)\n#######################################################################################################\n\n\n# plots of power for\n# mean test effect(et) ~ Normal (mean filter effect, mean filter effect/2) (i.e cv = 1/2)\n#-----------------------------------------------------------------------------------------\n\ney_vec <- c(seq(0, 1, .2), 2, 3, 5, 8)\n\np_.5 <- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower2e2, fdr = TRUE, null = 50, low_eff_plot = FALSE)\np_.9 <- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower4e2, fdr = TRUE, null = 90, low_eff_plot = FALSE)\np_.99<- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower5e2, fdr = TRUE, null = 99, low_eff_plot = FALSE)\n\np_.5_low_ef <- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower2e2, fdr = TRUE, null = 50, low_eff_plot = TRUE)\np_.9_low_ef <- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower4e2, fdr = TRUE, null = 90, low_eff_plot = TRUE)\np_.99_low_ef<- nice_plots(filterEffectVec = ey_vec, FwerPowerFdrPower = FwerPowerFdrPower5e2, fdr = TRUE, null = 99, low_eff_plot = TRUE)\n\np = plot_grid(p_.5, p_.9, p_.99, p_.5_low_ef, p_.9_low_ef, p_.99_low_ef, ncol = 3, labels = letters[1:3], align = 'hv')\ntitle <- ggdraw() + draw_label(\"Power: et ~ Normal(ey, ey/2)\")\nplot_grid(title, p, legend_power, ncol = 1, rel_heights=c(.1, 1, .1))\n\n\n\n\n# for supplementry materials FWER----------\n\n# plots FWER et = ey (i.e cv =0)\n#-------------------------------------------------\nm0 = 5000\ndat_50 <- data.frame(filterEffectVec, t(FwerPowerFdrPower2e1[1:4,]))\ncolnames(dat_50) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_50_all <- melt(dat_50, id.var = \"effectSize\")\np_50_all <- ggplot(dat_50_all, aes(x = effectSize, y = value,group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FWER\", title = \"null = 50%\") +\n    theme(legend.position=\"none\")\n\nm0 = 9000\ndat_90 <- data.frame(filterEffectVec, t(FwerPowerFdrPower4e1[1:4,]))\ncolnames(dat_90) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_90_all <- melt(dat_90, id.var = \"effectSize\")\np_90_all <- ggplot(dat_90_all, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FWER\", title = \"null = 90%\") +\n    theme(legend.position=\"none\")\n\nm0 = 9900\ndat_99 <- data.frame(filterEffectVec, t(FwerPowerFdrPower5e1[1:4,]))\ncolnames(dat_99) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_99_all <- melt(dat_99, id.var = \"effectSize\")\np_99_all <- ggplot(dat_99_all, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FWER\", title = \"null = 99%\") +\n    theme(legend.title = element_blank())\n\nlegend_FWER <- get_legend(p_99_all + theme(legend.direction=\"horizontal\",\n                                        legend.position=\"bottom\"))\np_99_all <- p_99_all + theme(legend.position=\"none\")\n\n\np = plot_grid(p_50_all, p_90_all, p_99_all, ncol = 3, align = 'hv', labels = letters[1:3])\ntitle <- ggdraw() + draw_label(expression(paste(\"FWER: et = ey, \", alpha, \" = .05\")))\nplot_grid(title, p, legend_corr, ncol = 1, rel_heights=c(.1, 1, .1), align = 'hv')\n\n\n\n\n\n\n# plots FWER et ~ Normal(ey, ey/2) (i.e cv = 1/2)\n#-------------------------------------------------\nm0 = 5000\ndat_50 <- data.frame(filterEffectVec, t(FwerPowerFdrPower2e2[1:4,]))\ncolnames(dat_50) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_50_all <- melt(dat_50, id.var = \"effectSize\")\np_50_all <- ggplot(dat_50_all, aes(x = effectSize, y = value,group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FWER\", title = \"null = 50%\") +\n    theme(legend.position=\"none\")\n\nm0 = 9000\ndat_90 <- data.frame(filterEffectVec, t(FwerPowerFdrPower4e2[1:4,]))\ncolnames(dat_90) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_90_all <- melt(dat_90, id.var = \"effectSize\")\np_90_all <- ggplot(dat_90_all, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FWER\", title = \"null = 90%\") +\n    theme(legend.position=\"none\")\n\nm0 = 9900\ndat_99 <- data.frame(filterEffectVec, t(FwerPowerFdrPower5e2[1:4,]))\ncolnames(dat_99) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_99_all <- melt(dat_99, id.var = \"effectSize\")\np_99_all <- ggplot(dat_99_all, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FWER\", title = \"null = 99%\") +\n    theme(legend.title = element_blank())\n\nlegend_FWER <- get_legend(p_99_all + theme(legend.direction=\"horizontal\",\n                                        legend.position=\"bottom\"))\np_99_all <- p_99_all + theme(legend.position=\"none\")\n\n\np = plot_grid(p_50_all, p_90_all, p_99_all, ncol = 3, align = 'hv', labels = letters[1:3])\ntitle <- ggdraw() + draw_label(expression(paste(\"FWER: et ~ Normal(ey, ey/2), \", alpha, \" = .05\")))\nplot_grid(title, p, legend_corr, ncol = 1, rel_heights=c(.1, 1, .1), align = 'hv')\n\n\n\n\n\n# for supplementry materials FDR----------\n\n# plots FDR et = ey (i.e cv =0)\n#-------------------------------------------------\ndat_50 <- data.frame(filterEffectVec, t(FwerPowerFdrPower2e1[9:12,]))\ncolnames(dat_50) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_50_all <- melt(dat_50, id.var = \"effectSize\")\np_50_all <- ggplot(dat_50_all, aes(x = effectSize, y = value,group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FDR\", title = \"null = 50%\") +\n    theme(legend.position=\"none\")\n\ndat_90 <- data.frame(filterEffectVec, t(FwerPowerFdrPower4e1[9:12,]))\ncolnames(dat_90) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_90_all <- melt(dat_90, id.var = \"effectSize\")\np_90_all <- ggplot(dat_90_all, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FDR\", title = \"null = 90%\") +\n    theme(legend.position=\"none\")\n\ndat_99 <- data.frame(filterEffectVec, t(FwerPowerFdrPower5e1[9:12,]))\ncolnames(dat_99) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_99_all <- melt(dat_99, id.var = \"effectSize\")\np_99_all <- ggplot(dat_99_all, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FDR\", title = \"null = 99%\") +\n    theme(legend.title = element_blank())\n\nlegend_fdr <- get_legend(p_99_all + theme(legend.direction=\"horizontal\",\n                                        legend.position=\"bottom\"))\np_99_all <- p_99_all + theme(legend.position=\"none\")\n\n\np = plot_grid(p_50_all, p_90_all, p_99_all, ncol = 3, align = 'hv', labels = letters[1:3])\ntitle <- ggdraw() + draw_label(expression(paste(\"FDR: et = ey, \", alpha, \" = .05\")))\nplot_grid(title, p, legend_corr, ncol = 1, rel_heights=c(.1, 1, .1), align = 'hv')\n\n\n\n\n\n# plots FDR et ~ Normal(ey, ey/2) (i.e cv = 1/2)\n#-------------------------------------------------\ndat_50 <- data.frame(filterEffectVec, t(FwerPowerFdrPower2e2[9:12,]))\ncolnames(dat_50) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_50_all <- melt(dat_50, id.var = \"effectSize\")\np_50_all <- ggplot(dat_50_all, aes(x = effectSize, y = value,group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FDR\", title = \"null = 50%\") +\n    theme(legend.position=\"none\")\n\ndat_90 <- data.frame(filterEffectVec, t(FwerPowerFdrPower4e2[9:12,]))\ncolnames(dat_90) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_90_all <- melt(dat_90, id.var = \"effectSize\")\np_90_all <- ggplot(dat_90_all, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FDR\", title = \"null = 90%\") +\n    theme(legend.position=\"none\")\n\ndat_99 <- data.frame(filterEffectVec, t(FwerPowerFdrPower5e2[9:12,]))\ncolnames(dat_99) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_99_all <- melt(dat_99, id.var = \"effectSize\")\np_99_all <- ggplot(dat_99_all, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"FDR\", title = \"null = 99%\") +\n    theme(legend.title = element_blank())\n\nlegend_fdr <- get_legend(p_99_all + theme(legend.direction=\"horizontal\",\n                                        legend.position=\"bottom\"))\np_99_all <- p_99_all + theme(legend.position=\"none\")\n\n\np = plot_grid(p_50_all, p_90_all, p_99_all, ncol = 3, align = 'hv', labels = letters[1:3])\ntitle <- ggdraw() + draw_label(expression(paste(\"FDR: et ~ Normal(ey, ey/2), \", alpha, \" = .05\")))\nplot_grid(title, p, legend_corr, ncol = 1, rel_heights=c(.1, 1, .1), align = 'hv')\n\n\n\n\n\n\n\n\n\n\n\n# see the effect fo the miss variance of the effect on Power\n#-----------------------------------------\n# load data for continuous power----------------\n# this code is to load saved workspace from parallel computing\nload(\"U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_fwerPowerFdrPower_missVar_bin.RDATA\")\n\n\n\n# plots of power for miss variance of the test effect size; et ~ normal(ey, CV*ey)\n# CV = coefficient of variance (i.e cv = 1, 3, 10)\n# 50% null case\n#----------------------------------------------------------------------------\ndat_50_cv1 <- data.frame(filterEffectVec, t(FwerPowerFdrPower2a2[13:16,]))\ncolnames(dat_50_cv1) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_50_cv1_all <- melt(dat_50_cv1, id.var = \"effectSize\")\np_50_cv1 <- ggplot(dat_50_cv1_all, aes(x = effectSize, y = value,group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"power\", title = \"CV = 1\") +\n    theme(legend.position=\"none\")\n\ndat_50_cv3 <- data.frame(filterEffectVec, t(FwerPowerFdrPower2a3[13:16,]))\ncolnames(dat_50_cv3) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_50_cv3_all <- melt(dat_50_cv3, id.var = \"effectSize\")\np_50_cv3 <- ggplot(dat_50_cv3_all, aes(x = effectSize, y = value,group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"power\", title = \"CV = 3\") +\n    theme(legend.position=\"none\")\n\ndat_50_cv10 <- data.frame(filterEffectVec, t(FwerPowerFdrPower2a10[13:16,]))\ncolnames(dat_50_cv10) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_50_cv10_all <- melt(dat_50_cv10, id.var = \"effectSize\")\np_50_cv10 <- ggplot(dat_50_cv10_all, aes(x = effectSize, y = value,group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"power\", title = \"CV = 10\") +\n    theme(legend.position=\"none\")\n\n\ndat_50_cv1_par <- data.frame(filterEffectVec[1:6], t(FwerPowerFdrPower2a2[13:16,1:6]))\ncolnames(dat_50_cv1_par) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_50_cv1_par <- melt(dat_50_cv1_par, id.var = \"effectSize\")\np_50_cv1_par <- ggplot(dat_50_cv1_par, aes(x = effectSize, y = log(value),group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"log(power)\") +\n    theme(legend.position=\"none\")\n\n\ndat_50_cv3_par <- data.frame(filterEffectVec[1:6], t(FwerPowerFdrPower2a3[13:16,1:6]))\ncolnames(dat_50_cv3_par) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_50_cv3_par <- melt(dat_50_cv3_par, id.var = \"effectSize\")\np_50_cv3_par <- ggplot(dat_50_cv3_par, aes(x = effectSize, y = log(value),group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"log(power)\") +\n    theme(legend.position=\"none\")\n\ndat_50_cv10_par <- data.frame(filterEffectVec[1:6], t(FwerPowerFdrPower2a10[13:16,1:6]))\ncolnames(dat_50_cv10_par) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_50_cv10_par <- melt(dat_50_cv10_par, id.var = \"effectSize\")\np_50_cv10_par <- ggplot(dat_50_cv10_par, aes(x = effectSize, y = log(value),group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"log(power)\") +\n    theme(legend.position=\"none\")\n\n\np_50_cv10_par <- ggplot(dat_50_cv10_par, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"power\") +\n    theme(legend.title = element_blank())\n\nlegend_misVar <- get_legend(p_50_cv10_par + theme(legend.direction=\"horizontal\",\n                                        legend.position=\"bottom\"))\np_50_cv10_par <- p_50_cv10_par + theme(legend.position=\"none\")\n\n\np = plot_grid(p_50_cv1, p_50_cv3, p_50_cv10, p_50_cv1_par, p_50_cv3_par, p_50_cv10_par,\n              nrow = 2, labels = letters[1:3], align = 'hv')\ntitle <- ggdraw() + draw_label(\"Power: et ~ Normal(ey, CV*ey), null = 50%\")\nplot_grid(title, p, legend_misVar, ncol = 1, rel_heights=c(.1, 1, .1), align = 'hv')\n\n\n\n\n\n# CV = coefficient of variance (i.e cv = 1, 3, 10)\n# 90% null case------------\ndat_90_cv1 <- data.frame(filterEffectVec, t(FwerPowerFdrPower4a2[13:16,]))\ncolnames(dat_90_cv1) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_90_cv1_all <- melt(dat_90_cv1, id.var = \"effectSize\")\np_90_cv1 <- ggplot(dat_90_cv1_all, aes(x = effectSize, y = value,group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"power\", title = \"CV = 1\") +\n    theme(legend.position=\"none\")\n\ndat_90_cv3 <- data.frame(filterEffectVec, t(FwerPowerFdrPower4a3[13:16,]))\ncolnames(dat_90_cv3) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_90_cv3_all <- melt(dat_90_cv3, id.var = \"effectSize\")\np_90_cv3 <- ggplot(dat_90_cv3_all, aes(x = effectSize, y = value,group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"power\", title = \"CV = 3\") +\n    theme(legend.position=\"none\")\n\ndat_90_cv10 <- data.frame(filterEffectVec, t(FwerPowerFdrPower4a10[13:16,]))\ncolnames(dat_90_cv10) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_90_cv10_all <- melt(dat_90_cv10, id.var = \"effectSize\")\np_90_cv10 <- ggplot(dat_90_cv10_all, aes(x = effectSize, y = value,group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"power\", title = \"CV = 10\") +\n    theme(legend.position=\"none\")\n\n\ndat_90_cv1_par <- data.frame(filterEffectVec[1:6], t(FwerPowerFdrPower4a2[13:16,1:6]))\ncolnames(dat_90_cv1_par) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_90_cv1_par <- melt(dat_90_cv1_par, id.var = \"effectSize\")\np_90_cv1_par <- ggplot(dat_90_cv1_par, aes(x = effectSize, y = log(value),group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"log(power)\") +\n    theme(legend.position=\"none\")\n\n\ndat_90_cv3_par <- data.frame(filterEffectVec[1:6], t(FwerPowerFdrPower4a3[13:16,1:6]))\ncolnames(dat_90_cv3_par) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_90_cv3_par <- melt(dat_90_cv3_par, id.var = \"effectSize\")\np_90_cv3_par <- ggplot(dat_90_cv3_par, aes(x = effectSize, y = log(value),group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"log(power)\") +\n    theme(legend.position=\"none\")\n\ndat_90_cv10_par <- data.frame(filterEffectVec[1:6], t(FwerPowerFdrPower4a10[13:16,1:6]))\ncolnames(dat_90_cv10_par) <- c(\"effectSize\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_90_cv10_par <- melt(dat_90_cv10_par, id.var = \"effectSize\")\np_90_cv10_par <- ggplot(dat_90_cv10_par, aes(x = effectSize, y = log(value),group = variable,\n                             col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"log(power)\") +\n    theme(legend.position=\"none\")\n\n\np_90_cv10_par <- ggplot(dat_90_cv10_par, aes(x = effectSize, y = value,group = variable,\n                                   col=variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ey\", y = \"power\") +\n    theme(legend.title = element_blank())\n\nlegend_misVar <- get_legend(p_90_cv10_par + theme(legend.direction=\"horizontal\",\n                                        legend.position=\"bottom\"))\np_90_cv10_par <- p_90_cv10_par + theme(legend.position=\"none\")\n\n\n\np = plot_grid(p_90_cv1, p_90_cv3, p_90_cv10, p_90_cv1_par, p_90_cv3_par, p_90_cv10_par,\n              nrow = 2, labels = letters[1:3], align = 'hv')\ntitle <- ggdraw() + draw_label(\"Power: et ~ Normal(ey, CV*ey), null = 90%\")\nplot_grid(title, p, legend_misVar, ncol = 1, rel_heights=c(.1, 1, .1), align = 'hv')\n\n\n\n\n\n# see correaltion effect on Power (i.e cv =0)\n#------------------------------------------------------\n# load data for continuous power----------------\n# this code is to load saved workspace from parallel computing\nload(\"U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_FwerPowerFdrPower_cont.RDATA\")\n\n\nfilterEffectVec <- c(seq(0,1,.2),2,3,5,8)\nE = FwerPowerFdrPower4e1\nF = FwerPowerFdrPower4f1\nG = FwerPowerFdrPower4g1\nH = FwerPowerFdrPower4h1\nI = FwerPowerFdrPower4i1\ncorr = c(0,.3,.5,.7,.9)\nr = 13\ngplots <- list()\nfor(e in 3:8)\t\t\t\t# effect size index\n{\n    PRO = c(E[r,e],    F[r,e],    G[r,e],    H[r,e],    I[r,e])\n    BH = c(E[(r+1),e],F[(r+1),e],G[(r+1),e],H[(r+1),e],I[(r+1),e])\n    RDW = c(E[(r+2),e],F[(r+2),e],G[(r+2),e],H[(r+2),e],I[(r+2),e])\n    IHW = c(E[(r+3),e],F[(r+3),e],G[(r+3),e],H[(r+3),e],I[(r+3),e])\n    dat = data.frame(corr, PRO, BH, RDW, IHW)\n    dat2 = melt(dat, id.var = \"corr\")\n    gplots[[e]] <- ggplot(dat2, aes(x = corr, y = value, group = variable,\n                                    col = variable)) +\n        geom_line(aes(linetype = variable), size = 1.5) +\n        labs(x = \"corr\", y = \"power\", title = paste(\"et = \", filterEffectVec[e])) +\n        #theme(legend.title = element_blank())\n        theme(legend.position=\"none\")\n}\n\ngplots[[8]] <- gplots[[8]] + theme(legend.position=\"bottom\", legend.title = element_blank())\n\nlegend_corr <- get_legend(gplots[[8]])\n\ngplots[[8]] <- gplots[[8]] + theme(legend.position=\"none\")\n\n\np = plot_grid(gplots[[3]],gplots[[4]],gplots[[5]],gplots[[6]],gplots[[7]],gplots[[8]],\n              ncol = 3, labels = letters[1:6], align = 'hv')\ntitle <- ggdraw() + draw_label(\"null = 90%, et = ey\")\nplot_grid(title, p, legend_corr, ncol = 1, rel_heights=c(.1, 1, .1), align = 'hv')\n\n\n\n\n# see the influence of the null proportion\n#------------------------------------------------\n\n# this code is to load saved workspace from parallel computing\nload(\"U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_fwerPowerFdrPower_cont_null_influence.RDATA\")\n\neffectVec <- c(seq(0,1,.2),2,3,5,8)\nnullProp <- c(20, 50, 75, 90, 99)\n\n# corr = .3-------------\nmat_ef4 <- rbind(FwerPowerFdrPower1f1[13:16, 4], FwerPowerFdrPower2f1[13:16, 4],\n                 FwerPowerFdrPower3f1[13:16, 4], FwerPowerFdrPower4f1[13:16, 4],\n                 FwerPowerFdrPower5f1[13:16, 4])\ndat_ef4 <- data.frame(nullProp, mat_ef4)\ncolnames(dat_ef4) <- c(\"nullProp\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_ef4_melt <- melt(dat_ef4, id.var = \"nullProp\")\np_ef4 <- ggplot(dat_ef4_melt, aes(x = nullProp, y = value, group = variable,\n                                  col = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"prop. of null\", y = \"power\", title = \"ey = 0.6\") +\n    theme(legend.position=\"none\")\n\n\nmat_ef6 <- rbind(FwerPowerFdrPower1f1[13:16, 6], FwerPowerFdrPower2f1[13:16, 6],\n                 FwerPowerFdrPower3f1[13:16, 6], FwerPowerFdrPower4f1[13:16, 6],\n                 FwerPowerFdrPower5f1[13:16, 6])\ndat_ef6 <- data.frame(nullProp, mat_ef6)\ncolnames(dat_ef6) <- c(\"nullProp\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_ef6_melt <- melt(dat_ef6, id.var = \"nullProp\")\np_ef6 <- ggplot(dat_ef6_melt, aes(x = nullProp, y = value, group = variable,\n                                  col = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"prop. of null\", y = \"power\", title = \"ey = 1.0\") +\n    theme(legend.position=\"none\")\n\n\nmat_ef8 <- rbind(FwerPowerFdrPower1f1[13:16, 8], FwerPowerFdrPower2f1[13:16, 8],\n                 FwerPowerFdrPower3f1[13:16, 8], FwerPowerFdrPower4f1[13:16, 8],\n                 FwerPowerFdrPower5f1[13:16, 8])\ndat_ef8 <- data.frame(nullProp, mat_ef8)\ncolnames(dat_ef8) <- c(\"nullProp\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_ef8_melt <- melt(dat_ef8, id.var = \"nullProp\")\np_ef8 <- ggplot(dat_ef8_melt, aes(x = nullProp, y = value, group = variable,\n                                  col = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"prop. of null\", y = \"power\", title = \"ey = 3.0\") +\n    theme(legend.position=\"none\")\n\nplot_cor.3 <- plot_grid(p_ef4, p_ef6, p_ef8, align = 'hv', ncol = 3, labels=letters[1:3])\ntitle <- ggdraw() + draw_label(\"corr = 0.3\", fontface='bold')\nplot_cor.3_title <- plot_grid(title, plot_cor.3, ncol=1, rel_heights=c(0.1, 1), align = 'hv')\n\n\n\n# corr = .7 -------------\nmat_ef4 <- rbind(FwerPowerFdrPower1h1[13:16, 4], FwerPowerFdrPower2h1[13:16, 4],\n                 FwerPowerFdrPower3h1[13:16, 4], FwerPowerFdrPower4h1[13:16, 4],\n                 FwerPowerFdrPower5h1[13:16, 4])\ndat_ef4 <- data.frame(nullProp, mat_ef4)\ncolnames(dat_ef4) <- c(\"nullProp\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_ef4_melt <- melt(dat_ef4, id.var = \"nullProp\")\np_ef4 <- ggplot(dat_ef4_melt, aes(x = nullProp, y = value, group = variable,\n                                  col = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"prop. of null\", y = \"power\", title = \"ey = 0.6\") +\n    theme(legend.position=\"none\")\n\n\nmat_ef6 <- rbind(FwerPowerFdrPower1h1[13:16, 6], FwerPowerFdrPower2h1[13:16, 6],\n                 FwerPowerFdrPower3h1[13:16, 6], FwerPowerFdrPower4h1[13:16, 6],\n                 FwerPowerFdrPower5h1[13:16, 6])\ndat_ef6 <- data.frame(nullProp, mat_ef6)\ncolnames(dat_ef6) <- c(\"nullProp\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_ef6_melt <- melt(dat_ef6, id.var = \"nullProp\")\np_ef6 <- ggplot(dat_ef6_melt, aes(x = nullProp, y = value, group = variable,\n                                  col = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"prop. of null\", y = \"power\", title = \"ey = 1.0\") +\n    theme(legend.position=\"none\")\n\n\nmat_ef8 <- rbind(FwerPowerFdrPower1h1[13:16, 8], FwerPowerFdrPower2h1[13:16, 8],\n                 FwerPowerFdrPower3h1[13:16, 8], FwerPowerFdrPower4h1[13:16, 8],\n                 FwerPowerFdrPower5h1[13:16, 8])\ndat_ef8 <- data.frame(nullProp, mat_ef8)\ncolnames(dat_ef8) <- c(\"nullProp\", \"PRO\", \"BH\", \"RDW\", \"IHW\")\ndat_ef8_melt <- melt(dat_ef8, id.var = \"nullProp\")\np_ef8 <- ggplot(dat_ef8_melt, aes(x = nullProp, y = value, group = variable,\n                                  col = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"prop. of null\", y = \"power\", title = \"ey = 3.0\") +\n    theme(legend.position=\"none\")\n\nplot_cor.7 <- plot_grid(p_ef4, p_ef6, p_ef8, align = 'hv', ncol = 3, labels=letters[4:6])\ntitle <- ggdraw() + draw_label(\"corr = 0.7\", fontface='bold')\nplot_cor.7_title <- plot_grid(title, plot_cor.7, ncol=1, rel_heights=c(0.1, 1), align = 'hv')\n\n\n# for the main title------------\np_ef8 <- ggplot(dat_ef8_melt, aes(x = nullProp, y = value, group = variable,\n                                  col = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"prop. of null\", y = \"power\", title = \"ey = 3.0\") +\n    theme(legend.title = element_blank())\n\nlegend_null <- get_legend(p_ef8 + theme(legend.direction=\"horizontal\",\n                                        legend.position=\"bottom\"))\np_ef8 <- p_ef8 + theme(legend.position=\"none\")\n\n\np = plot_grid(plot_cor.3_title, plot_cor.7_title, ncol = 1, align = 'hv')\ntitle <- ggdraw() + draw_label(\"Binary: power vs. prop. of null\")\nplot_grid(title, p, legend_corr, ncol = 1, rel_heights=c(.1, 1, .1), align = 'hv')\n\n\n\n\n\n\n\n#======================== relationship between filter and test effect ==========\n\n\nprob_relation_filterTestEffect <- function(r, rho, H0, ed, m0, m1)\n{\n    mean_ey = rho*ed\n    sd_ey = sqrt(1 - rho^2)\n    ey_val = rnorm(100, mean_ey, sd_ey)\n    prob_condition_ey <- function(ey)\n    {\n    \tet <- ifelse(H0==0, 0, ey)\n        probs_per_ey = prob_rank_givenEffect(k=r, et=et, ey=ey, nrep = 10000,\n                                                 m0=m0, m1=m1)\n        return(probs_per_ey)\n    }\n    prob_per_r = mean(sapply(ey_val,  prob_condition_ey))\n    return(prob_per_r)\n}\n\nm = 100\nm0 = 50\nm1 = 50\ned=0\n\nprob_test0_cor.2 <- sapply(1:100, prob_relation_filterTestEffect, rho=.2, H0=0,\n                           ed=ed, m0=m0, m1=m1)\nprob_test1_cor.2 <- sapply(1:100, prob_relation_filterTestEffect, rho=.2, H0=1,\n                           ed=ed, m0=m0, m1=m1)\n\nprob_test0_cor.5 <- sapply(1:100, prob_relation_filterTestEffect, rho=.5, H0=0,\n                           ed=ed, m0=m0,m1=m1)\nprob_test1_cor.5 <- sapply(1:100, prob_relation_filterTestEffect, rho=.5, H0=1,\n                           ed=ed, m0=m0,m1=m1)\n\nprob_test0_cor.8 <- sapply(1:100, prob_relation_filterTestEffect, rho=.8, H0=0,\n                           ed=ed,m0=m0,m1=m1)\nprob_test1_cor.8 <- sapply(1:100, prob_relation_filterTestEffect, rho=.8, H0=1,\n                           ed=ed,m0=m0,m1=m1)\n\nprob0 <- sapply(1:100, prob_rank_givenEffect, et=0, ey=ed, nrep = 10000, m0=m0, m1=m1)\nprob1 <- sapply(1:100, prob_rank_givenEffect, et=ed, ey=ed, nrep = 10000, m0=m0, m1=m1)\n\npar(mfrow=c(1,3))\nmatplot(1:100, cbind(prob_test0_cor.2, prob_test1_cor.2, prob0, prob1))\nmatplot(1:100, cbind(prob_test0_cor.5, prob_test1_cor.5, prob0, prob1))\nmatplot(1:100, cbind(prob_test0_cor.8, prob_test1_cor.8, prob0, prob1))\n\n\n\n# this code is to load saved workspace from parallel computing\nload(\"U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/smu_relation_filterTest.RDATA\")\n\n\n# nice plots---------\nranks=1:100\ndatRelaion1 <- data.frame(ranks, prob0, prob1, prob_test0_cor.2, prob_test1_cor.2)\ncolnames(datRelaion1) <- c(\"ranks\", \"FH0\",\"FH1\",\"TH0\",\"TH1\")\ndatRelaion1_melt1 <- melt(datRelaion1, id.var=\"ranks\")\n\ndatRelaion2 <- data.frame(ranks, prob0, prob1, prob_test0_cor.5, prob_test1_cor.5)\ncolnames(datRelaion2) <- c(\"ranks\", \"FH0\",\"FH1\",\"TH0\",\"TH1\")\ndatRelaion1_melt2 <- melt(datRelaion2, id.var=\"ranks\")\n\ndatRelaion3 <- data.frame(ranks, prob0, prob1, prob_test0_cor.8, prob_test1_cor.8)\ncolnames(datRelaion3) <- c(\"ranks\", \"FH0\",\"FH1\",\"TH0\",\"TH1\")\ndatRelaion1_melt3 <- melt(datRelaion3, id.var=\"ranks\")\n\n\np_.2 <- ggplot(datRelaion1_melt1, aes(x = ranks, y = value, group = variable,\n                         colour = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ranks\", y = \"p(rank | effect)\", title = \"cor = .2\") +\n    theme(legend.position=\"none\")\n\np_.5 <- ggplot(datRelaion1_melt2, aes(x = ranks, y = value, group = variable,\n                                    colour = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ranks\", y = \"p(rank | effect)\", title = \"cor = .5\") +\n    theme(legend.title = element_blank(), legend.position=\"bottom\")\n\np_.8 <- ggplot(datRelaion1_melt3, aes(x = ranks, y = value, group = variable,\n                         colour = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ranks\", y = \"p(rank | effect)\", title = \"cor = .8\") +\n    theme(legend.position=\"none\")\n\n# extract the legend from one of the plots\nlegend_rel <- get_legend(p_.5 + theme(legend.direction=\"horizontal\",\n                                 legend.position=\"bottom\"))\np_.5 = p_.5 + theme(legend.position=\"none\")\n\n# arrange the plots\ngrid.arrange(p_.2, p_.5, p_.8,ggplot(NULL),legend_rel,ggplot(NULL),ncol=3, heights=c(7,1),\n             top= \"et = 2, m0 = 50, m1 = 50\")\n\n\n# nice plots---------\nranks=1:100\ndatRelaion1 <- data.frame(ranks, prob02, prob12, prob_test0_cor.22, prob_test1_cor.22)\ncolnames(datRelaion1) <- c(\"ranks\", \"FH0\",\"FH1\",\"TH0\",\"TH1\")\ndatRelaion1_melt1 <- melt(datRelaion1, id.var=\"ranks\")\n\ndatRelaion2 <- data.frame(ranks, prob02, prob12, prob_test0_cor.52, prob_test1_cor.52)\ncolnames(datRelaion2) <- c(\"ranks\", \"FH0\",\"FH1\",\"TH0\",\"TH1\")\ndatRelaion1_melt2 <- melt(datRelaion2, id.var=\"ranks\")\n\ndatRelaion3 <- data.frame(ranks, prob02, prob12, prob_test0_cor.82, prob_test1_cor.82)\ncolnames(datRelaion3) <- c(\"ranks\", \"FH0\",\"FH1\",\"TH0\",\"TH1\")\ndatRelaion1_melt3 <- melt(datRelaion3, id.var=\"ranks\")\n\n\np_.2 <- ggplot(datRelaion1_melt1, aes(x = ranks, y = value, group = variable,\n                                      colour = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ranks\", y = \"p(rank | effect)\", title = \"cor = .2\") +\n    theme(legend.position=\"none\")\n\np_.5 <- ggplot(datRelaion1_melt2, aes(x = ranks, y = value, group = variable,\n                                      colour = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ranks\", y = \"p(rank | effect)\", title = \"cor = .5\") +\n    theme(legend.title = element_blank(), legend.position=\"bottom\")\n\np_.8 <- ggplot(datRelaion1_melt3, aes(x = ranks, y = value, group = variable,\n                                      colour = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ranks\", y = \"p(rank | effect)\", title = \"cor = .8\") +\n    theme(legend.position=\"none\")\n\n# extract the legend from one of the plots\nlegend_rel <- get_legend(p_.5 + theme(legend.direction=\"horizontal\",\n                                      legend.position=\"bottom\"))\np_.5 = p_.5 + theme(legend.position=\"none\")\n\n# arrange the plots\n#dev.new(width=8, height=4)\ngrid.arrange(p_.2, p_.5, p_.8,ggplot(NULL),legend_rel,ggplot(NULL),ncol=3, heights=c(7,1),\n             top= \"et = 2, m0 = 90, m1 = 10\")\n#=============================end===============================================\n\n\n\n# nice plots---------\nranks=1:100\ndatRelaion1 <- data.frame(ranks, prob0, prob1, prob_test0_cor.2, prob_test1_cor.2)\ncolnames(datRelaion1) <- c(\"ranks\", \"FH0\",\"FH1\",\"TH0\",\"TH1\")\ndatRelaion1_melt1 <- melt(datRelaion1, id.var=\"ranks\")\n\ndatRelaion2 <- data.frame(ranks, prob0, prob1, prob_test0_cor.5, prob_test1_cor.5)\ncolnames(datRelaion2) <- c(\"ranks\", \"FH0\",\"FH1\",\"TH0\",\"TH1\")\ndatRelaion1_melt2 <- melt(datRelaion2, id.var=\"ranks\")\n\ndatRelaion3 <- data.frame(ranks, prob0, prob1, prob_test0_cor.8, prob_test1_cor.8)\ncolnames(datRelaion3) <- c(\"ranks\", \"FH0\",\"FH1\",\"TH0\",\"TH1\")\ndatRelaion1_melt3 <- melt(datRelaion3, id.var=\"ranks\")\n\n\np_.2 <- ggplot(datRelaion1_melt1, aes(x = ranks, y = value, group = variable,\n                                      colour = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ranks\", y = \"p(rank | effect)\", title = \"cor = .2\") +\n    theme(legend.position=\"none\")\n\np_.5 <- ggplot(datRelaion1_melt2, aes(x = ranks, y = value, group = variable,\n                                      colour = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ranks\", y = \"p(rank | effect)\", title = \"cor = .5\") +\n    theme(legend.title = element_blank(), legend.position=\"bottom\")\n\np_.8 <- ggplot(datRelaion1_melt3, aes(x = ranks, y = value, group = variable,\n                                      colour = variable)) +\n    geom_line(aes(linetype = variable), size = 1.5) +\n    labs(x = \"ranks\", y = \"p(rank | effect)\", title = \"cor = .8\") +\n    theme(legend.position=\"none\")\n\n# extract the legend from one of the plots\nlegend_rel <- get_legend(p_.5 + theme(legend.direction=\"horizontal\",\n                                      legend.position=\"bottom\"))\np_.5 = p_.5 + theme(legend.position=\"none\")\n\n# arrange the plots\n#dev.new(width=8, height=4)\ngrid.arrange(p_.2, p_.5, p_.8,ggplot(NULL),legend_rel,ggplot(NULL),ncol=3, heights=c(7,1),\n             top= \"et = 2, m0 = 99, m1 = 1\")\n#=============================end===============================================\n\n\n\n#========================data application=======================================\n\n##########################################################################################################\n\n#---------------Example-1: bottomly data (RNA-seq)-----------------------------\n\n\n########################################################################################################\n\n# data processing\n#-------------------------\nbottomly_count_table <- read.table(\"bottomly_count_table.txt\",h=T)\nbottomly_phenodata <- read.table(\"bottomly_phenodata.txt\",h=T)\ncountData <- as.matrix(bottomly_count_table[,-1])\t\t# counts\ncondition <- factor(bottomly_phenodata[,3])\t\t\t\t# strain as factor\ndds <- DESeqDataSetFromMatrix(countData, DataFrame(condition), ~ condition)\ndds <- DESeq(dds)\nbottomly <- as.data.frame(results(dds))\ncolnames(bottomly)\n\n\ntest = bottomly$stat\npval = bottomly$pvalue\nfilter = bottomly$baseMean\n\n# Data <- data.frame(pvals, filters)\n# write.csv(Data, \"Data.csv\")\n\nData <- tibble(test, pval, filter)\t# data of filter covariate and pvlaues\n\n# fite box-cox regression\n#--------------------------------\nbc <- boxcox(filter ~ test)\ntrans <- bc$x[which.max(bc$y)]\nmodel_bot <- lm(filter^trans ~ test)\n\n\n# summary statistics of the data\n#------------------------------------\nbarlines <- \"#1F3552\"\n\nhist_test <- ggplot(Data, aes(x = Data$test)) +\n        geom_histogram(aes(y = ..density..), binwidth = 1,\n\t  colour = barlines, fill = \"#4271AE\") +\n\t\tlabs(x = \"test statistics\")\n\nhist_filter <- ggplot(Data, aes(x = Data$filter)) +\n        geom_histogram(aes(y = ..density..),\n\t  colour = barlines, fill = \"#4274AE\") +\n\t\tlabs(x = \"filter statistics\")\n\nhist_pval <- ggplot(Data, aes(x = Data$pval)) +\n        geom_histogram(aes(y = ..density..),\n\t  colour = barlines, fill = \"#4281AE\")+\n\t\tlabs(x = \"pvalues\")\n\npval_filter <- ggplot(Data, aes(x = rank(-Data$filter), y = -log10(pval))) +\n\t\tgeom_point()+\n\t\tlabs(x = \"ranks of filters\", y = \"-log(pvalue)\")+\n\t\tscale_x_continuous(limits = c(0, 25000), breaks=seq(0, 25000, 10000))\n\np_ecdf <- ggplot(Data, aes(x = pval)) +\n\t\t\tstat_ecdf(geom = \"step\")+\n\t\t\tlabs(x = \"pvalues\", title=\"empirical cumulative distribution\")+\n\t\t\ttheme(plot.title = element_text(size = rel(.7)))\n\n\n\nqqplot.data <- function (vec) # argument: vector of numbers\n{\n  # following four lines from base R's qqline()\n  y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))\n  x <- qnorm(c(0.25, 0.75))\n  slope <- diff(y)/diff(x)\n  int <- y[1L] - slope * x[1L]\n\n  d <- data.frame(resids = vec)\n\n  ggplot(d, aes(sample = resids)) + stat_qq() +\n\tgeom_abline(slope = slope, intercept = int, col=\"red\")+\n\tlabs(x = \"normal quantiles\", y = \"fitted values\",\n\ttitle = expression(paste(\"Model: \", filter^.061, \" ~ \", beta[0] + beta[1]*test)))+\n\ttheme(plot.title = element_text(size = rel(.7)))\n\n}\n\nqqplot <- qqplot.data(model_bot$fit)\n\ngrid.arrange(hist_test, hist_filter, hist_pval, pval_filter, p_ecdf, qqplot,\n\t\tncol = 3, heights = c(7, 7), top = \"Bottomly: data summary\")\n\n\n\n\n\n\n\n\n\n\n# fit regression to obtain filter and test effect sizes\n#-------------------------------------------------------------\nnrep = 10000\nm = length(pval)\nnull = qvalue(pval, pi0.method=\"bootstrap\")$pi0\nm0 = ceiling(null*m)\nm1 = m-m0\n\ntest <- qnorm(pval/2, lower.tail = F)\n\ntest_effect = if(m1 == 0) {0\n} else {sort(test, decreasing = T)[1:m1]}\t\t# two-tailed test\n\net_cont = mean(test_effect, na.rm = T)\ney_cont = model_bot$coef[[1]] + model_bot$coef[[2]]*et_cont\net_bin = median(test_effect, na.rm = T)\ney_bin = model_bot$coef[[1]] + model_bot$coef[[2]]*et_bin\n\nprob_bin <-vapply(1:m, prob_rank_givenEffect, 1, et = ey_bin,\n                  ey = ey_bin, nrep = nrep, m0 = m0, m1 = m1)\nprob_cont <-vapply(1:m, prob_rank_givenEffect, 1, et = ey_cont,\n                   ey = ey_cont, nrep = nrep, m0 = m0, m1 = m1)\n\nalphaVec = seq(.05,.1,length.out = 5)\nw_bin <- sapply(alphaVec, weight_binary, et = et_bin, m = m, m1 = m1, tail = 1,\n                delInterval = .0001, prob = prob_bin)\nw_cont = sapply(alphaVec, weight_continuous, et = et_cont, m = m, tail = 1,\n                delInterval=.0001 , prob = prob_cont)\n\n\n# function to compute number of rejections\n# input:\n#=======\n# i=index number\n# alpha = significance level\n# Data = data to be analyzed composed of P=pvalues and Xf=filter covariate\n# W_bin_mat = Binary weight matrix for diffecrent alpha\n# W_cont_mat = Continuous weight matrix for different alpha\n# output:\n#========\n# rej_mat = a rejection matrix composed of rejections from variaous methods\n#---------------------------------------------------------------\nfun.rejections <- function(i,alphaVec,Data,W_bin_mat,W_cont_mat)\n{\n    alpha=alphaVec[i]\n    W_bin=as.vector(W_bin_mat[,i])\n    W_cont=as.vector(W_cont_mat[,i])\n\n    m = length(W_bin)\n\n    OD <- Data[order(Data$filter,decreasing=T),]\t\t# odered by covariate\n    Ordered.pvalue <- OD$pval\t\t\t\t\t# odered pvalues for all tests\n\n    # preprocesing before counting rejections\n    #----------------------------------------\n    ihw_res_bon <- ihw(Data$pval,Data$filter, alpha=alpha, nbins=4,nsplits_internal=5,\n                       lambdas=seq(0,3,length=20),adjustment_type = \"bonferroni\")\n    padj_Pro_bin <-p.adjust(Ordered.pvalue/W_bin, method = \"BH\")\t\t# proposed method based on right-tailed pvalue\n    padj_Pro_cont <-p.adjust(Ordered.pvalue/W_cont, method = \"BH\")\n    padj_BH <- p.adjust(Data$pval, method = \"BH\")\n    ihw_res_fdr <- ihw(Data$pval,Data$filter, alpha=alpha, nbins=13,nsplits_internal=5L,\n                       nfolds_internal=4L)\n\n    # rejections by FWER\n    #-------------------\n    Pro_bon_bin = sum(Ordered.pvalue <= alpha*W_bin/m, na.rm = TRUE)\n    Pro_bon_cont = sum(Ordered.pvalue <= alpha*W_cont/m, na.rm = TRUE)\n    bon = sum(Data$pval <= alpha/m, na.rm = TRUE)\n    ihw_bon = rejections(ihw_res_bon)\n\n    # rejections by FDR\n    #------------------\n    Pro_bh_bin = sum(padj_Pro_bin <= alpha, na.rm = TRUE)\n    Pro_bh_cont = sum(padj_Pro_cont <= alpha, na.rm = TRUE)\n    bh = sum(padj_BH <= alpha, na.rm = TRUE)\n    ihw_bh = rejections(ihw_res_fdr)\n\n    return(c(Pro_bon_bin,Pro_bon_cont,bon,ihw_bon,Pro_bh_bin,Pro_bh_cont,bh,ihw_bh))\n}\nrej_mat_bot = sapply(1:length(alphaVec),fun.rejections,alphaVec,Data=Data,W_bin_mat=w_bin,W_cont_mat=w_cont)\n\n\n# from IHW paper-------------\nrnaseq_file <- system.file(\"real_data_examples/result_files\", \"RNAseq_benchmark.Rds\", package = \"IHWpaper\")\nrnaseq_data <- readRDS(file=rnaseq_file)\npanel_a_data <- group_by(rnaseq_data$alpha_df, alpha) %>% summarize(BH = max(bh_rejections), IHW=max(rejections))\n\n\n# nice plots---------------\n# rej_mat_bot_FWER <- data.frame(alphaVec, t(rej_mat_bot[1:4,]))\n# colnames(rej_mat_bot_FWER) <- c(\"alpha\", \"PRO_bin\",\"PRO_cont\",\"BON\",\"IHW\" )\n# rej_mat_bot_FWER2 <- melt(rej_mat_bot_FWER, id.var = \"alpha\")\n\nIHW = c(1312, 1434, 1535, 1665, 1783)\nBH = c(1211, 1339, 1414, 1507, 1618)\nrej_mat_bot_FDR <- data.frame(alphaVec, t(rej_mat_bot[5:6,]),BH, IHW)\ncolnames(rej_mat_bot_FDR) <- c(\"alpha\", \"PRO_bin\",\"PRO_cont\",\"BH\",\"IHW\" )\nrej_mat_bot_FDR2 <- melt(rej_mat_bot_FDR, id.var = \"alpha\")\n\n\n# p_fwer <- ggplot(rej_mat_bot_FWER2, aes(x = alpha, y = value, group = variable,\n#                                       colour = variable)) +\n#     geom_line(aes(linetype = variable), size = 1.2) +\n#     labs(x = \"alpha\", y = \"discoveries\", title = \"FWER based\") +\n#     theme(legend.title = element_blank())\n#     #theme(panel.background = element_rect(fill = 'white', colour = 'black'))\n\n#df = data.frame(colour=colors, last_vals=c(370, 382, 348, 391),\n                label=c(\"PRO_bin\",\"PRO_cont\",\"BH\",\"IHW\"))\n#panel_d <- pretty_legend(p_fwer, df, .1)\n#panel_d\n\np_fdr_bot <- ggplot(rej_mat_bot_FDR2, aes(x = alpha, y = value, group = variable,\n                                       colour = variable)) +\n    geom_line(aes(linetype = variable), size = 1.2) +\n    labs(x = \"alpha\", y = \"discoveries\", title = \"FDR based\") +\n    theme(legend.title = element_blank())\n\n\n# # arrange the plots\n# grid.arrange(p_fwer, p_fdr, ncol=2,\n#     top= paste0(\"Bottomly: et_bin = \", round(et_bin,1), \", et_cont = \", round(et_cont,1),\n#                 \", ey_bin = \", round(ey_bin,1), \", ey_cont = \", round(ey_cont,1),\"\\n\",\n#                          \"m = \",m,\", null = \", round(null*100),\"%\"))\n\n\n\n\n\n#########################################################################################################\n\n#--------------Example-2: proteomics------------------------------\n\n##########################################################################################################\n\n# data processing\n#-------------------------\nproteomics_file <- system.file(\"extdata/real_data\",\"science_signaling.csv\", package = \"IHWpaper\")\nproteomics_df <- read.csv(proteomics_file, stringsAsFactors = F)\n# pvalues were adjusted by BH method so rewrite to obtain orginal pvlaues\nproteomics_df$pvalue <- rank(proteomics_df$p1, ties.method=\"first\")*proteomics_df$p1/nrow(proteomics_df)\nproteomics_df$test = qnorm(proteomics_df$pvalue, lower.tail = F)\nnames(proteomics_df)\n\n\ntest = proteomics_df$test\ntest[test == -Inf] <- NA\ntest[test == Inf] <- NA\npval = proteomics_df$pvalue\nfilter = proteomics_df$X..peptides\nhist(pval)  # one-tailed pvalue\n\nData <- tibble(test, pval, filter)\t# data of filter covariate and pvlaues\n\n\nbc2 <- boxcox(filter ~ test)\ntrans2 <- bc2$x[which.max(bc2$y)]\nmodel_prot <- lm(filter^trans2 ~ test)\n\n\n# summary statistics of the data\n#------------------------------------\nbarlines <- \"#1F3552\"\n\nhist_test <- ggplot(Data, aes(x = Data$test)) +\n        geom_histogram(aes(y = ..density..), binwidth = 1,\n\t  colour = barlines, fill = \"#4271AE\") +\n\t\tlabs(x = \"test statistics\")\n\nhist_filter <- ggplot(Data, aes(x = Data$filter)) +\n        geom_histogram(aes(y = ..density..),\n\t  colour = barlines, fill = \"#4274AE\") +\n\t\tlabs(x = \"filter statistics\")\n\nhist_pval <- ggplot(Data, aes(x = Data$pval)) +\n        geom_histogram(aes(y = ..density..),\n\t  colour = barlines, fill = \"#4281AE\")+\n\t\tlabs(x = \"pvalues\")\n\npval_filter <- ggplot(Data, aes(x = rank(-Data$filter), y = -log10(pval))) +\n\t\tgeom_point()+\n\t\tlabs(x = \"ranks of filters\", y = \"-log(pvalue)\")\n\np_ecdf <- ggplot(Data, aes(x = pval)) +\n\t\t\tstat_ecdf(geom = \"step\")+\n\t\t\tlabs(x = \"pvalues\", title=\"empirical cumulative distribution\")+\n\t\t\ttheme(plot.title = element_text(size = rel(.7)))\n\n\n\nqqplot.data <- function (vec) # argument: vector of numbers\n{\n  # following four lines from base R's qqline()\n  y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))\n  x <- qnorm(c(0.25, 0.75))\n  slope <- diff(y)/diff(x)\n  int <- y[1L] - slope * x[1L]\n\n  d <- data.frame(resids = vec)\n\n  ggplot(d, aes(sample = resids)) + stat_qq() +\n\tgeom_abline(slope = slope, intercept = int, col=\"red\")+\n\tlabs(x = \"normal quantiles\", y = \"fitted values\",\n\ttitle = expression(paste(\"Model: \", filter^(-1.414), \" ~ \", beta[0] + beta[1]*test)))+\n\ttheme(plot.title = element_text(size = rel(.7)))\n\n}\n\nqqplot <- qqplot.data(model_prot$fit)\n\ngrid.arrange(hist_test, hist_filter, hist_pval, pval_filter, p_ecdf, qqplot,\n\t\tncol = 3, heights = c(7, 7), top = \"Bottomly: data summary\")\n\n\n\n\n\n\n\n\n\n\n\n#fit simple regression to obtain filter and test effect sizes\n#-------------------------------------------------------------\nnrep = 10000\nm = length(pval)\n#null=propTrueNull(proteomics_df$pvalue)\nnull = qvalue(pval, pi0.method = \"bootstrap\")$pi0\nm0 = ceiling(null*m)\nm1 = m-m0\n\n\n\ntest_effect = if(m1 == 0) {0\n} else {sort(test, decreasing = T)[1:m1]}\t\t# two-tailed test\n\net_cont = mean(test_effect, na.rm = T)\ney_cont = model_prot$coef[[1]] + model_prot$coef[[2]]*et_cont\net_bin = median(test_effect, na.rm = T)\ney_bin = model_prot$coef[[1]] + model_prot$coef[[2]]*et_bin\n\nprob_bin <-vapply(1:m, prob_rank_givenEffect, 1, et = ey_bin,\n                  ey = ey_bin, nrep = nrep, m0 = m0, m1 = m1)\nprob_cont <-vapply(1:m, prob_rank_givenEffect, 1, et = ey_cont,\n                   ey = ey_cont, nrep = nrep, m0 = m0, m1 = m1)\n\nalphaVec = seq(.05,.1,length.out = 5)\nw_bin <- sapply(alphaVec, weight_binary, et = et_bin, m = m, m1 = m1, tail = 1,\n                       delInterval = .0001, prob = prob_bin)\nw_cont = sapply(alphaVec, weight_continuous, et = et_cont, m = m, tail = 1,\n                           delInterval=.0001 , prob = prob_cont)\n\n\n# function to compute number of rejections\n# input:\n#=======\n# i=index number\n# alpha = significance level\n# Data = data to be analyzed composed of P=pvalues and Xf=filter covariate\n# W_bin_mat = Binary weight matrix for diffecrent alpha\n# W_cont_mat = Continuous weight matrix for different alpha\n# output:\n#========\n# rej_mat = a rejection matrix composed of rejections from variaous methods\n#---------------------------------------------------------------\nfun.rejections <- function(i,alphaVec,Data,W_bin_mat,W_cont_mat)\n{\n    alpha=alphaVec[i]\n    W_bin=as.vector(W_bin_mat[,i])\n    W_cont=as.vector(W_cont_mat[,i])\n\n    m = length(W_bin)\n\n    OD <- Data[order(Data$filter,decreasing=T),]\t\t# odered by covariate\n    Ordered.pvalue <- OD$pval\t\t\t\t\t# odered pvalues for all tests\n\n    # preprocesing before counting rejections\n    #----------------------------------------\n    ihw_res_bon <- ihw(Data$pval,Data$filter, alpha=alpha, nbins=4,nsplits_internal=5,\n                       lambdas=seq(0,3,length=20),adjustment_type = \"bonferroni\")\n    padj_Pro_bin <-p.adjust(Ordered.pvalue/W_bin, method = \"BH\")\t\t# proposed method based on right-tailed pvalue\n    padj_Pro_cont <-p.adjust(Ordered.pvalue/W_cont, method = \"BH\")\n    padj_BH <- p.adjust(Data$pval, method = \"BH\")\n    ihw_res_fdr <- ihw(Data$pval,Data$filter, alpha=alpha, nbins=4,nsplits_internal=5, lambdas=seq(0,3,length=20))\n\n    # rejections by FWER\n    #-------------------\n    Pro_bon_bin = sum(Ordered.pvalue <= alpha*W_bin/m, na.rm = TRUE)\n    Pro_bon_cont = sum(Ordered.pvalue <= alpha*W_cont/m, na.rm = TRUE)\n    bon = sum(Data$pval <= alpha/m, na.rm = TRUE)\n    ihw_bon = rejections(ihw_res_bon)\n\n    # rejections by FDR\n    #------------------\n    Pro_bh_bin = sum(padj_Pro_bin <= alpha, na.rm = TRUE)\n    Pro_bh_cont = sum(padj_Pro_cont <= alpha, na.rm = TRUE)\n    bh = sum(padj_BH <= alpha, na.rm = TRUE)\n    ihw_bh = rejections(ihw_res_fdr)\n\n    return(c(Pro_bon_bin,Pro_bon_cont,bon,ihw_bon,Pro_bh_bin,Pro_bh_cont,bh,ihw_bh))\n}\nrej_mat_prot = sapply(1:length(alphaVec),fun.rejections,alphaVec,Data=Data,W_bin_mat=w_bin,W_cont_mat=w_cont)\n\n\n# from IHW paper-------------\nproteomics_file <- system.file(\"real_data_examples/result_files\", \"proteomics_benchmark.Rds\", package = \"IHWpaper\")\nproteomics_data <- readRDS(file=proteomics_file)\npanel_c_data <- group_by(proteomics_data$alpha_df, alpha) %>% summarize(BH = max(bh_rejections), IHW=max(rejections)) %>%\n  gather(method, rejections, BH, IHW)\n\n\n# # nice plots-----------\n# rej_mat_prot_FWER <- data.frame(alphaVec, t(rej_mat_prot[1:4,]))\n# colnames(rej_mat_prot_FWER) <- c(\"alpha\", \"PRO_bin\",\"PRO_cont\",\"BON\",\"IHW\" )\n# rej_mat_prot_FWER2 <- melt(rej_mat_prot_FWER, id.var = \"alpha\")\n\nrej_mat_prot_FDR <- data.frame(alphaVec, t(rej_mat_prot[5:7,]),IHW=c(192, 216, 238, 262, 271))\ncolnames(rej_mat_prot_FDR) <- c(\"alpha\", \"PRO_bin\",\"PRO_cont\",\"BH\",\"IHW\" )\nrej_mat_prot_FDR2 <- melt(rej_mat_prot_FDR, id.var = \"alpha\")\n\n\n# p_fwer_prot <- ggplot(rej_mat_prot_FWER2, aes(x = alpha, y = value, group = variable,\n#                                         colour = variable)) +\n#     geom_line(aes(linetype = variable), size = 1.2) +\n#     labs(x = \"alpha\", y = \"discoveries\", title = \"FWER based\") +\n#     theme(legend.title = element_blank())\n# #theme(panel.background = element_rect(fill = 'white', colour = 'black'))\n#\n# #df = data.frame(colour=colors, last_vals=c(370, 382, 348, 391),\n# label=c(\"PRO_bin\",\"PRO_cont\",\"BH\",\"IHW\"))\n# #panel_d <- pretty_legend(p_fwer, df, .1)\n# #panel_d\n\n\n\n# final plots----------------------\nload(\"U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/bottomly_data_example.RDATA\")\nload(\"U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/proteomics_data_example.RDATA\")\n\n\np_fdr_bot <- ggplot(rej_mat_bot_FDR2, aes(x = alpha, y = value, group = variable,\n                                          colour = variable)) +\n  geom_line(aes(linetype = variable), size = 1.5) +\n  labs(x = expression(bold(paste(\"Nominal \",alpha))), y = \"Discoveries\", title = \"Bottomly\") +\n  theme(legend.title = element_blank(), legend.position=\"bottom\")\n\np_fdr_prot <- ggplot(rej_mat_prot_FDR2, aes(x = alpha, y = value, group = variable,\n                                            colour = variable)) +\n  geom_line(aes(linetype = variable), size = 1.5) +\n  labs(x = expression(bold(paste(\"Nominal \",alpha))), y = \"Discoveries\", title = \"Proteomics\") +\n  theme(legend.position=\"none\")\n\n\n# extract the legend from one of the plots\nlegend_example <- get_legend(p_fdr_bot + theme(legend.direction=\"horizontal\",\n                                      legend.position=\"bottom\"))\np_fdr_bot = p_fdr_bot + theme(legend.position=\"none\")\np_fdr_prot = p_fdr_prot + theme(legend.position=\"none\")\n\n# arrange the plots\n#dev.new(width=8, height=4)\ngrid.arrange(arrangeGrob(p_fdr_bot, p_fdr_prot, nrow=1),legend_example, nrow=2, heights=c(7,1))\n\np = plot_grid(p_fdr_bot, p_fdr_prot, nrow=1, labels = \"auto\", align='hv')\nplot_grid(p, legend_example, ncol = 1, rel_heights = c(1,.1))\n\n\n\n\n\n",
    "created" : 1496248196621.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "297014496",
    "id" : "723942E1",
    "lastKnownWriteTime" : 1496486485,
    "last_content_update" : 1496486485,
    "path" : "U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/Article-1-version-4.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}