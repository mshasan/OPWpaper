{
    "collab_server" : "",
    "contents" : "#' @title Simulate Family Wise Error Rate (FWER)\n#'\n#' @description This function simulate family wise error rate or test type I error rate\n#'\n#' @param s number of replication in a simulation\n#' @param m total number of hypothesis test\n#' @param alphaVec a vector of significance levels\n#'\n#' @details\n#' This function generate pvalues times form \\code{uniform(0, 1)} then applying\n#' OPWeight method to obtain the Familly Wise Error Rate (FWER)\n#'\n#' @author Mohamad S. Hasan, \\email{mshasan@uga.edu}\n#' @export\n#'\n#' @seealso \\code{\\link{qvalue}}\n#' \\code{\\link{prob_rank_givenEffect}}\n#' \\code{\\link{weight_binary}}\n#' \\code{\\link{weight_continuous}}\n\n#'\n#' @return a matrix of fwer for different methods\n#'\n#' @references Hasan and Schliekelman (2017)\n#'\n#' @examples\n#' alphaVec = seq(.01, .1, .02)\n#' simVal = 1:3  # in actual case use at least simVal = 1000\n#' typeIerror_mat = sapply(simVal, simu_fwer, m = 100, alphaVec = alphaVec)\n#'\n#===============================================================================\n# inpout:----------------\n# s = number of replication in a simulation\n# m = total number of hypothesis test\n# alphaVec = a vector of significance levels\n#\n# internal parameters:-----\n# pval = pvalues from null tests\n# pval_filter = filter pvalues from null tests\n# test = test statistics\n# filter = filter test statistics\n# dat = a data frame\n# OD = ordered data by filter statistics\n# odered.pvalue = ordered pvalue by filter statistics\n# nullprop = prportion of null\n# m0 = true null test size\n# m1 = true alternative test size\n# test_effect =  estimated true alternative test effects\n# prob_bin = binary ranks probablity\n# prob_cont = continuous ranks probability\n# w_bin = binary weight\n# w_cont = continuous weight\n#\n# output:---------------\n# a matrix of fwer for different methods\n#\n#===============================================================================\n\nsimu_fwer <- function(s, m, alphaVec)\n    {\n        fwer_per_rep <- function(alpha)\n        {\n            pval <- runif(m)\n            pval_filter <- runif(m)\n            test = qnorm(pval, lower.tail = FALSE)\n            filter = qnorm(pval_filter, lower.tail = FALSE)\n\n            dat = tibble(test, pval, filter)\n\n            OD = dat[order(dat$filter, decreasing=TRUE), ]\n            odered.pvalue = OD$pval\n\n            nullprop = qvalue(pval)$pi0\n            m0 = ceiling(m*nullprop)\n            m1 = m - m0\n\n            model = lm(filter ~ test)\n\n            test_effect <- if(m1 == 0) {0\n                           } else {sort(test, decreasing = TRUE)[1:m1]}\n\n            et_bin = median(test_effect, na.rm = TRUE)\n            et_cont = mean(test_effect, na.rm = TRUE)\n\n            ey_bin = model$coef[[1]] + model$coef[[2]]*et_bin\n            ey_cont = model$coef[[1]] + model$coef[[2]]*et_cont\n\n            prob_bin <-sapply(1:m, prob_rank_givenEffect, et = ey_bin,\n                              ey = ey_bin,m0 = m0, m1 = m1)\n            prob_cont <-sapply(1:m, prob_rank_givenEffect, et = ey_cont,\n                               ey = ey_cont, m0 = m0, m1 = m1)\n\n            w_bin <- weight_binary(alpha = alpha, et = et_bin, m = m, m1 = m1,\n                            tail = 1, delInterval = .0001, ranksProb = prob_bin)\n            w_cont = weight_continuous(alpha = alpha, et = et_cont, m = m,\n                            tail = 1, delInterval = .0001 , ranksProb = prob_cont)\n\n            ihw_fwer <- ihw(dat$pval, dat$filter, alpha = alpha,\n                                            adjustment_type = \"bonferroni\")\n\n            bon = sum(pval <= alpha/m, na.rm = TRUE)\n            pro_bin = sum(odered.pvalue <= alpha*w_bin/m, na.rm = TRUE)\n            pro_cont = sum(odered.pvalue <= alpha*w_cont/m, na.rm = TRUE)\n            IHW <- rejections(ihw_fwer)\n\n            return(c(bon, pro_bin, pro_cont, IHW))\n        }\n\n        fwer_per_rep_mat = sapply(alphaVec, fwer_per_rep)\n        return(fwer_per_rep_mat)\n    }\n\n\n\n\n\n\n\n",
    "created" : 1495743861667.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3874303555",
    "id" : "1DE6A2F",
    "lastKnownWriteTime" : 1495746841,
    "last_content_update" : 1495746841308,
    "path" : "C:/Users/mshasan/Google Drive/My R Packages/OPWpaper/R/simu_fwer.R",
    "project_path" : "R/simu_fwer.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}