{
    "collab_server" : "",
    "contents" : "#' @title Plot ranks' probabilities and the corresponding weights\n#'\n#' @description \\code{OPWeight} package proposed methods to compute the probabilities\n#' of the rank of test given the effect size and the corresponding weights.\n#' This funciton uses the simulation results of the probabilities and the weights to plot.\n#'\n#' @param ey_index column numbers of the null proportions of a specific effect\n#' @param null_index column numbers of the effects of specific null proportion\n#' @param m total number of tests\n#' @param ey mean filter effect size used in \\code{ey_index}\n#' @param null proportion of the null tests used in \\code{null_index}\n#' @param prob data of the ranks probability\n#' @param weight data of the weight\n#'\n#' @details\n#' To use this function to plot, one needs to load two data sets generated earlier\n#' 1) ranksProb_byEffect_m10000.csv, and 2) Weight_byEffect_cont_m10000.csv then\n#' the function.\n#'\n#' @author Mohamad S. Hasan, \\email{mshasan@uga.edu}\n#' @export\n#'\n#'\n#' @return figure of four plots\n#'\n#' @references Hasan and Schliekelman (2017)\n#'\n#' @examples\n#' # just an example\n#' # m = 10000\n#' # ranksProb <- read.csv(\"ranksProb_byEffect_m10000.csv\", h=T)\n#' # ranksWeight <- read.csv(\"Weight_byEffect_cont_m10000.csv\",h=T)\n#' # ranksWeight <- t(t(ranksWeight)/colSums(ranksWeight)*m)\n#' # prob_weight_plots(ey_index = c(7, 17, 27, 37), null_index = c(26, 27, 28),\n#' #         m = 10000, ey = 2, null = 50, prob = ranksProb, weight = ranksWeight)\n#'\n#==============================================================================\n\nprob_weight_plots <- function(ey_index, null_index, m, ey, null, prob, weight)\n    {\n        ranks = 1:m\n\n        prob_by_null = data.frame(ranks, prob[ , ey_index])\n        names(prob_by_null) <- c(\"ranks\", \"20%\", \"50%\", \"75%\", \"90%\")\n        prob_by_null_melt <- melt(prob_by_null, id.var = \"ranks\",\n                                  variable.name = \"null prop.\")\n        prob_plot = ggplot(prob_by_null_melt, aes(x = prob_by_null_melt$ranks,\n                    y = prob_by_null_melt$value, group = prob_by_null_melt$`null prop.`,\n                    colour = prob_by_null_melt$`null prop.`)) +\n            geom_line(aes(linetype = prob_by_null_melt$`null prop.`), size = 1.5) +\n            labs(x = \"Ranks\", y = \"p(rank | effect)\", title = paste0(\"et = ey = \", ey))\n\n        prob_plot + scale_shape_discrete(name  =\"Payer\",\n                                  breaks=c(\"Female\", \"Male\"),\n                                  labels=c(\"Woman\", \"Man\"))\n\n\n        weight_by_null = data.frame(ranks, weight[ , ey_index])\n        names(weight_by_null) <- c(\"ranks\", \"20%\", \"50%\", \"75%\", \"90%\")\n        weight_by_null_melt <- melt(weight_by_null, id.var = \"ranks\",\n                                    variable.name = \"null prop.\")\n        weight_plot = ggplot(weight_by_null_melt, aes(x = weight_by_null_melt$ranks,\n                      y = log(weight_by_null_melt$value), group = weight_by_null_melt$`null prop.`,\n                      colour = weight_by_null_melt$`null prop.`)) +\n            geom_line(aes(linetype = weight_by_null_melt$`null prop.`), size = 1.5) +\n            labs(x = \"Ranks\", y = \"log(weight)\", title = paste0(\"et = ey = \", ey))\n\n\n        prob_by_effect <- data.frame(ranks, prob[ , null_index])\n        colnames(prob_by_effect) <- c(\"ranks\", \"0.6\", \"2.0\", \"5.0\")\n        prob_by_effect_melt <- melt(prob_by_effect, id.var = \"ranks\",\n                                    variable.name = \"effect size\")\n        prob_plot_by_effect = ggplot(prob_by_effect_melt, aes(x = prob_by_effect_melt$ranks,\n                              y = prob_by_effect_melt$value, group = prob_by_effect_melt$`effect size`,\n                              colour = prob_by_effect_melt$`effect size`)) +\n            geom_line(aes(linetype = prob_by_effect_melt$`effect size`), size = 1.5) +\n            labs(x = \"Ranks\", y = \"p(rank | effect)\", title = paste0(\"null = \", null, \"%\"))\n\n\n        weight_by_effect <- data.frame(ranks, weight[ , null_index])\n        colnames(weight_by_effect) <- c(\"ranks\", \"0.6\", \"2.0\", \"5.0\")\n        weight_by_effect_melt <- melt(weight_by_effect, id.var = \"ranks\",\n                                      variable.name = \"effect size\")\n        weight_plot_by_effect = ggplot(weight_by_effect_melt, aes(x = weight_by_effect_melt$ranks,\n                                y = log(weight_by_effect_melt$value),\n                                group = weight_by_effect_melt$`effect size`,\n                                colour = weight_by_effect_melt$`effect size`)) +\n            geom_line(aes(linetype = weight_by_effect_melt$`effect size`), size = 1.5) +\n            labs(x = \"Ranks\", y = \"log(weight)\", title = paste0(\"null = \", null, \"%\"))\n\n\n        pp <- plot_grid(prob_plot, weight_plot, prob_plot_by_effect, weight_plot_by_effect,\n                        nrow = 2, labels = c(\"a\", \"\", \"b\"), align = 'hv')\n        title <- ggdraw() + draw_label(\"Continuous: probability and weight vs. rank\")\n        plots = plot_grid(title, pp, ncol = 1, rel_heights=c(.1, 1), align = 'hv')\n\n        return(plots)\n\n}\n\n\n#' prob_weight_plots(ey_index = c(7, 17, 27, 37), null_index = c(26, 27, 28),\n#'          m = 10000, ey = 2, null = 50, prob = ranksProb, weight = ranksWeight)\n",
    "created" : 1496256868876.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "951067487",
    "id" : "50712837",
    "lastKnownWriteTime" : 1496267460,
    "last_content_update" : 1496267460370,
    "path" : "C:/Users/mshasan/Google Drive/My R Packages/OPWpaper/R/prob_weight_plots.R",
    "project_path" : "R/prob_weight_plots.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}