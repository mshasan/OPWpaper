{
    "collab_server" : "",
    "contents" : "\n# binary case---------------------\nlibrary(MASS)\nlibrary(qvalue)\nlibrary(splines)\nlibrary(OPWeight)\nlibrary(OPWpaper)\n\n\n#rm(list=ls())\ninstall.packages(\"mvnfast\")\nlibrary(mvnfast)\t\t# fast generate multi variate normal\n#source(\"https://bioconductor.org/biocLite.R\")\n#biocLite(\"IHW\")\nlibrary(\"IHW\")\t\t# independent hypotheis weight\n\n\n\n# distribution  of the pvalues\n\n\n\n\n\n\n# continuous case3 (power calculation)\n#(using test stat instead of pvalue to use relation between filter effect and test effect)\n#============================================================================================\nfun.simu <- function(s, m, null, corr, random, alpha, grp, grpSize, effectVec)\n{\n# generate data this part will be unknown in practice\n#---------------------------------------------------\nfun.FwerPowerFdr <- function(i)\n\t{\n\tey <- effectVec[i]\n\tm0 <- ceiling(m*null)\n\tm1 <- m-m0\n\tSigma <- matrix(corr, 100, 100) + diag(100)*(1-corr)\t\t# test correlation matrix\n\txf <- rep(ey,m)\t\t\t\t\t\t\t\t# only alt. filter effect vector\n\txt <- if(random==0){rep(ey, m)} else {rnorm(m, ey, ey/2)} \t# alt. test effect vector\n\tH <- rbinom(m, 1, 1-null)          \t   # alternative hypothesis true or false\n\tef <- H*xf  \t\t\t\t# filter effect vector (mixture of null and alt)\n\tet <- H*xt\t\t\t\t\t# test effect vector (mixture of null and alt)\n\tmGrp = m/100\t\t\t\t# subgroup of tests.\n\n\t# function to generate test\n\t# input: r=no. of test groups,eVec=effect vector,Sigma=corr matrix\n\t# output: test = multivariate test statistics\n\t#-------------------------------------------------------------------\n\tfun.test <- function(r, eVec, Sigma)\n\t\t{\n\t\teSub <- eVec[(100*r+1-100):(100*r)]\n\t\ttest <- as.vector(rmvn(1, eSub, Sigma))\n\t\treturn(test)\n\t\t}\n\ttest.ef <- if(corr==0) {rnorm(m,ef,1)} else {as.vector(sapply(1:mGrp,fun.test,eVec=ef,Sigma=Sigma))}\t# filter test stat\n\ttest.et <- if(corr==0) {rnorm(m,et,1)} else {as.vector(sapply(1:mGrp,fun.test,eVec=et,Sigma=Sigma))}\t# actual test stat\n\tpval.ef <- pnorm(test.ef, lower.tail = FALSE)\t\t# filter test pvalues\n\tpval.et <- pnorm(test.et, lower.tail = FALSE)\t\t# actual test pvalues\n\n\t# this will be the data we will work on (test and pvalue are known in practice)\n\t#------------------------------------------------------------------------------\n\tData <- data.frame(ef, tf=test.ef, pf=pval.ef, et, tt=test.et, pt=pval.et)\t# data of effect,test, and pvlaues\n\tOD <- Data[order(Data$tf,decreasing=T), ]\n\tOrdered.pvalue <- OD$pt\n\n\t# this part will compute P(rank|effect) emperically\n\t# we will always use first plot because it will be the closest to the alternative probability\n\t#-------------------------------------------------------------------------------------------\n\tfun.ranksProb <- function(j)\n\t\t{\n\t\tpvalPerGrp <- Ordered.pvalue[(j*grpSize-grpSize+1):(j*grpSize)]\n\t\th <- hist(pvalPerGrp, breaks=seq(0,1,length=21), plot=FALSE)$count\n\t\tprob = h/sum(h)\n\t\treturn(prob)\n\t\t}\n\tranksProbMat <- sapply(1:grp, fun.ranksProb)\n\trankProbsH01 <- ranksProbMat[1, ]/sum(ranksProbMat[1, ])\n\n\t# need to estimate effect size to compute weight\n\t#---------------------------------------------------------------------------------\n\tnullProp = qvalue(Data$pt, pfdr=TRUE, pi0.method=\"bootstrap\")$pi0\n\test.et = mean(sort(Data$tt, decreasing=T)[1:m1])\n\n\n\t# function to compute weight continuous case\n\t#--------------------------------------\n\tweight_continuous <- function(alpha,et,m,tail=2,delInterval,prob)\n\t{\n\t    prob <- prob/sum(prob)\n\t    delta <- seq(0,1,delInterval)\n\t    findDelta <- function(delta)\n\t    {\n\t        weight <- tail*(m/alpha)*pnorm(et/2 + 1/et*log(delta/(alpha*prob)),lower.tail=TRUE)\n\t        return(sum(weight,na.rm=T))\n\t    }\n\t    weightSumVec <- sapply(delta,findDelta)\n\t    deltaOut <- delta[min(abs(weightSumVec-m))==abs(weightSumVec-m)]\n\t    deltaOut <- ifelse(length(deltaOut)>1,.0001,deltaOut)\n\t    Weight.out <- tail*(m/alpha)*pnorm(et/2 + 1/et*log(deltaOut/(alpha*prob)),lower.tail=TRUE)\n\t    #normWeight <- ifelse(rep(sum(Weight.out),m)==0,1,Weight.out/sum(Weight.out)*m)\n\t    return(Weight.out)\n\t}\n\n\tW_perGrp <- weight_continuous(alpha=alpha,et=est.et,m=grp,tail=1,delInterval=.0001,prob=rankProbsH01)\n\tW <- rep(W_perGrp,each=grpSize)\n\tweight_pro <- if(sum(W,na.rm=T)==0){rep(1,m)} else {W/sum(W,na.rm=T)*m}\t# normalizing proposed weight\n\n\t# pro=proposed,bon=bonferroni,rdw=roeder and wasserman,IHW=independent Hyp Weight\n\t#----------------------------------------------------------------------------------------\n\tweight_rdw <- as.vector(RoederWasermanWeight(OD$tt,m=m,gamma=.05,alpha=alpha,rk=1000))\t\t# roeder wasserman weight\n\tihw_fwer <- ihw(OD$pt,OD$tf,alpha=alpha,adjustment_type = \"bonferroni\")\t\t# IHW method for FWER\n\tihw_fdr <-  ihw(OD$pt,OD$tf,alpha=alpha,adjustment_type = \"BH\")\t\t\t# IHW method for FDR\n\n\trej_pro <- OD$pt <= alpha*weight_pro/m\t\t\t# total rejections of all methods\n\trej_bon <- OD$pt <= alpha/m\n\trej_rdw <- OD$pt <= alpha*weight_rdw/m\n\trej_ihwFwer <- adj_pvalues(ihw_fwer) <= alpha\n\n\tFWER_pro <- sum(rej_pro[OD$et==0])/sum(OD$et==0)\t\t\t# FWER of proposed method\n\tFWER_bon <- sum(rej_bon[OD$et==0])/sum(OD$et==0)\t\t\t# FWER of bonferroni method\n\tFWER_rdw <- sum(rej_rdw[OD$et==0])/sum(OD$et==0)\t\t\t# FWER of Roeder Wasserman method\n\tFWER_ihw <- sum(rej_ihwFwer[OD$et==0])/sum(OD$et==0)\t\t\t# FWER of IHW method\n\n\tPOWER_pro <- sum(rej_pro[OD$et!=0])/max(1,sum(OD$et!=0))\t\t# power of proposed\n\tPOWER_bon <- sum(rej_bon[OD$et!=0])/max(1,sum(OD$et!=0))\t\t# power of bonferroni\n\tPOWER_rdw <- sum(rej_rdw[OD$et!=0])/max(1,sum(OD$et!=0))\t\t# power of Roeder Wasserman method\n\tPOWER_ihw <- sum(rej_ihwFwer[OD$et!=0])/max(1,sum(OD$et!=0))\t# power of IHW method\n\n\tadjPval_pro <- p.adjust(OD$pt/weight_pro, method=\"BH\")\t# adjusted pvalue to compute FDR\n\tadjPval_bon <- p.adjust(OD$pt, method=\"BH\")\n\tadjPval_rdw <- p.adjust(OD$pt/weight_rdw, method=\"BH\")\n\tadjPval_ihw <- adj_pvalues(ihw_fdr)\n\n\tFDR_pro <- sum(adjPval_pro[OD$et==0] <= alpha)/max(1,sum(adjPval_pro <= alpha))\t# FDR of proposed\n\tFDR_bh  <- sum(adjPval_bon[OD$et==0] <= alpha)/max(1,sum(adjPval_bon <= alpha))\t# FDR of benjaminin and hochberg\n\tFDR_rdw <- sum(adjPval_rdw[OD$et==0] <= alpha)/max(1,sum(adjPval_rdw <= alpha))\t# FDR of wasserman\n\tFDR_ihw <- sum(adjPval_ihw[OD$et==0] <= alpha)/max(1,rejections(ihw_fdr))\t\t# FDR of IHW method\n\n\tFDR_POWER_pro <- sum(adjPval_pro[OD$et!=0] <= alpha)/max(1,sum(OD$et!=0))\t# FDR of proposed\n\tFDR_POWER_bh  <- sum(adjPval_bon[OD$et!=0] <= alpha)/max(1,sum(OD$et!=0))\t# FDR of benjaminin and hochberg\n\tFDR_POWER_rdw <- sum(adjPval_rdw[OD$et!=0] <= alpha)/max(1,sum(OD$et!=0))\t# FDR of wasserman\n\tFDR_POWER_ihw <- sum(adjPval_ihw[OD$et!=0] <= alpha)/max(1,sum(OD$et!=0))\t\t# FDR of IHW method\n\n\treturn(c(FWER_pro,FWER_bon,FWER_rdw,FWER_ihw,POWER_pro,POWER_bon,POWER_rdw,POWER_ihw,\n\t\tFDR_pro,FDR_bh,FDR_rdw,FDR_ihw,FDR_POWER_pro,FDR_POWER_bh,FDR_POWER_rdw,FDR_POWER_ihw))\n\t}\nFwerPowerFdr <- sapply(1:length(effectVec),fun.FwerPowerFdr)\nreturn(FwerPowerFdr)\n}\n\neffectVec <- c(seq(0,1,.2),2,3,5,8)\nsimu=3\nFwerPowerFdrPower <- sapply(1:simu,fun.simu,m=10000,null=.5,corr=0,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\n\n\neffectVec <- c(seq(0,1,.2),2,3,5,8)\nclusterExport(cl,\"effectVec\")\ns = 1:1000\n\n\nFwerPowerFdrPower2e1 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr= 0,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower2e2 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr= 0,random=1,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower2g1 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr=.5,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower2g2 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr=.5,random=1,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower2i1 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr=.9,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower2i2 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr=.9,random=1,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\n\nFwerPowerFdrPower4e1 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr= 0,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower4e2 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr= 0,random=1,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower4g1 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr=.5,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower4g2 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr=.5,random=1,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower4i1 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr=.9,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower4i2 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr=.9,random=1,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\n\nFwerPowerFdrPower5e1 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr= 0,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower5e2 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr= 0,random=1,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower5g1 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr=.5,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower5g2 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr=.5,random=1,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower5i1 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr=.9,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\nFwerPowerFdrPower5i2 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr=.9,random=1,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\n\n\nFwerPowerFdrPower = FwerPowerFdrPower5i1\nFwerPowerFdrPower_all = apply(FwerPowerFdrPower,1,mean,na.rm=T)\nFwerPowerFdrPower_byEffect = matrix(FwerPowerFdrPower_all,16,10,byrow=F)\n\n# plots\n#-----------\ndev.off()\npar(oma = c(1, 0, 0,0),mfrow=c(2,3))\nFwerPowerFdr <- FwerPowerFdrPower_byEffect\nmatplot(effectVec,cbind(FwerPowerFdr[1,],FwerPowerFdr[2,],FwerPowerFdr[3,],FwerPowerFdr[4,]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FWER\",ylim=c(0,max(FwerPowerFdr[1:4,],na.rm=T)))\nmatplot(effectVec,cbind(FwerPowerFdr[5,],FwerPowerFdr[6,],FwerPowerFdr[7,],FwerPowerFdr[8,]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"POWER\",ylim=c(0,1))\nmatplot(effectVec[1:6],cbind(FwerPowerFdr[5,1:6],FwerPowerFdr[6,1:6],FwerPowerFdr[7,1:6],FwerPowerFdr[8,1:6]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"POWER\",ylim=c(0,max(FwerPowerFdr[5:8,1:6],na.rm=T)))\nmatplot(effectVec,cbind(FwerPowerFdr[9,],FwerPowerFdr[10,],FwerPowerFdr[11,],FwerPowerFdr[12,]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR\")\nmatplot(effectVec,cbind(FwerPowerFdr[13,],FwerPowerFdr[14,],FwerPowerFdr[15,],FwerPowerFdr[16,]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR_POWER\")\nmatplot(effectVec[1:6],cbind(FwerPowerFdr[13,1:6],FwerPowerFdr[14,1:6],FwerPowerFdr[15,1:6],FwerPowerFdr[16,1:6]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR_POWER\")\npar(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 2, 0), new = TRUE)\nplot(0, 0, type = \"n\", bty = \"n\", xaxt = \"n\", yaxt = \"n\",main=\"null=99%,cor=.9,test effect=filter effect\")\nlegend(\"bottom\", c(\"PRO\",\"BON/BH\",\"RDW\",\"IHW\"), xpd = TRUE, horiz = TRUE, inset = c(0,\n    0), bty = \"n\", lty=1:4, ,col=1:4, cex = 1,lwd=2)\n\n\n\n\n\n\nFwerPowerFdrPower = FwerPowerFdrPower5i2\nFwerPowerFdrPower_all = apply(FwerPowerFdrPower,1,mean,na.rm=T)\nFwerPowerFdrPower_byEffect = matrix(FwerPowerFdrPower_all,16,10,byrow=F)\n\ndev.off()\nFwerPowerFdr <- FwerPowerFdrPower_byEffect\npar(oma = c(1, 0, 0,0),mfrow=c(2,3))\nmatplot(effectVec,cbind(FwerPowerFdr[1,],FwerPowerFdr[2,],FwerPowerFdr[3,],FwerPowerFdr[4,]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FWER\",ylim=c(0,max(FwerPowerFdr[1:4,],na.rm=T)))\nmatplot(effectVec,cbind(FwerPowerFdr[5,],FwerPowerFdr[6,],FwerPowerFdr[7,],FwerPowerFdr[8,]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"POWER\",ylim=c(0,1))\nmatplot(effectVec[1:6],cbind(FwerPowerFdr[5,1:6],FwerPowerFdr[6,1:6],FwerPowerFdr[7,1:6],FwerPowerFdr[8,1:6]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"POWER\",ylim=c(0,max(FwerPowerFdr[5:8,1:6],na.rm=T)))\nmatplot(effectVec,cbind(FwerPowerFdr[9,],FwerPowerFdr[10,],FwerPowerFdr[11,],FwerPowerFdr[12,]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR\")\nmatplot(effectVec,cbind(FwerPowerFdr[13,],FwerPowerFdr[14,],FwerPowerFdr[15,],FwerPowerFdr[16,]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR_POWER\")\nmatplot(effectVec[1:6],cbind(FwerPowerFdr[13,1:6],FwerPowerFdr[14,1:6],FwerPowerFdr[15,1:6],FwerPowerFdr[16,1:6]),\n\ttype=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR_POWER\")\npar(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 2, 0), new = TRUE)\nplot(0, 0, type = \"n\", bty = \"n\", xaxt = \"n\", yaxt = \"n\",main=\"null=99%,cor=.9,test effect= N(filter effect,filter effect/2)\")\nlegend(\"bottom\", c(\"PRO\",\"BH\",\"RDW\",\"IHW\"), xpd = TRUE, horiz = TRUE, inset = c(0,\n    0), bty = \"n\", lty=1:4, ,col=1:4, cex = 1,lwd=2)\n\n\n\n# see correaltion effect FWER/POWER/FDR\n#-----------------------------------------\ndev.off()\neffectVec <- c(seq(0,1,.2),2,3,5,8)\nE=FwerPowerFdrPower1e1\nF=FwerPowerFdrPower1f1\nG=FwerPowerFdrPower1g1\nH=FwerPowerFdrPower1h1\nI=FwerPowerFdrPower1i1\ncorr=c(0,.3,.5,.7,.9)\nr=1\npar(oma = c(1, 0, 0,0),mfrow=c(3,3))\nfor(e in 1:9)\t\t\t\t# effect size index\n{\ncor_pro=c(E[r,e],    F[r,e],    G[r,e],    H[r,e],    I[r,e])\ncor_bon=c(E[(r+1),e],F[(r+1),e],G[(r+1),e],H[(r+1),e],I[(r+1),e])\ncor_rdw=c(E[(r+2),e],F[(r+2),e],G[(r+2),e],H[(r+2),e],I[(r+2),e])\ncor_ihw=c(E[(r+3),e],F[(r+3),e],G[(r+3),e],H[(r+3),e],I[(r+3),e])\nmatplot(corr,cbind(cor_pro,cor_bon,cor_rdw,cor_ihw),type=\"l\",lwd=2,ylab=\"FWER\",\n\t\t\t\txlab=\"correlation\",main=paste(\"effect size=\",effectVec[e]))\n}\npar(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 2, 0), new = TRUE)\nplot(0, 0, type = \"n\", bty = \"n\", xaxt = \"n\", yaxt = \"n\",main=\"null=20%,test effect=filter effect\")\nlegend(\"bottom\", c(\"PRO\",\"BOH\",\"RDW\",\"IHW\"), xpd = TRUE, horiz = TRUE, inset = c(0,\n    0), bty = \"n\", lty=1:4, ,col=1:4, cex = 1,lwd=3)\n\n\n\n\n\n\n\n\n\npropH0 <- rep(c(.5,.9,.99),each=72)\nrandom <- rep(rep(c(0,1),each=12),9)\ncor = rep(rep(c(0,.5,.9),each=24),3)\nresult_type = rep(rep(c(\"Fwer\",\"Power\",\"Fdr\"),each=4),18)\n\ncolname <- paste(\"ef\",effectVec,sep=\"\")\ndat <- rbind(FwerPowerFdr1a,FwerPowerFdr1b,FwerPowerFdr1c,FwerPowerFdr1d,FwerPowerFdr1e,FwerPowerFdr1f,\n\t\tFwerPowerFdr2a,FwerPowerFdr2b,FwerPowerFdr2c,FwerPowerFdr2d,FwerPowerFdr2e,FwerPowerFdr2f,\n\t\tFwerPowerFdr3a,FwerPowerFdr3b,FwerPowerFdr3c,FwerPowerFdr3d,FwerPowerFdr3e,FwerPowerFdr3f)\ncolnames(dat) <- colname\ndatfinal <- data.frame(propH0,cor,random,result_type,dat)\nwrite.csv(datfinal,file=\"data.csv\",row.names=F)\n\n\n\n\n\n\n\n# Binary case (power calculation)\n#(using test stat instead of pvalue to use relation between filter effect and test effect)\n#============================================================================================\nfun.simu <- function(s, m, null, corr, random, alpha, grp, grpSize, effectVec)\n{\n    # generate data this part will be unknown in practice\n    #---------------------------------------------------\n    fun.FwerPowerFdr <- function(i)\n    {\n        ey <- effectVec[i]\n        m0 <- ceiling(m*null)\n        m1 <- m-m0\n        Sigma <- matrix(corr, 100, 100) + diag(100)*(1-corr)\t\t# test correlation matrix\n        xf <- rep(ey,m)\t\t\t\t\t\t\t\t# only alt. filter effect vector\n        xt <- if(random==0){rep(ey, m)} else {rnorm(m, ey, ey/2)} \t# alt. test effect vector\n        H <- rbinom(m, 1, 1-null)          \t   # alternative hypothesis true or false\n        ef <- H*xf  \t\t\t\t# filter effect vector (mixture of null and alt)\n        et <- H*xt\t\t\t\t\t# test effect vector (mixture of null and alt)\n        mGrp = m/100\t\t\t\t# subgroup of tests.\n\n        # function to generate test\n        # input: r=no. of test groups,eVec=effect vector,Sigma=corr matrix\n        # output: test = multivariate test statistics\n        #-------------------------------------------------------------------\n        fun.test <- function(r, eVec, Sigma)\n        {\n            eSub <- eVec[(100*r+1-100):(100*r)]\n            test <- as.vector(rmvn(1, eSub, Sigma))\n            return(test)\n        }\n        test.ef <- if(corr==0) {rnorm(m,ef,1)} else {as.vector(sapply(1:mGrp,fun.test,eVec=ef,Sigma=Sigma))}\t# filter test stat\n        test.et <- if(corr==0) {rnorm(m,et,1)} else {as.vector(sapply(1:mGrp,fun.test,eVec=et,Sigma=Sigma))}\t# actual test stat\n        pval.ef <- pnorm(test.ef, lower.tail = FALSE)\t\t# filter test pvalues\n        pval.et <- pnorm(test.et, lower.tail = FALSE)\t\t# actual test pvalues\n\n        # this will be the data we will work on (test and pvalue are known in practice)\n        #------------------------------------------------------------------------------\n        Data <- data.frame(ef, tf=test.ef, pf=pval.ef, et, tt=test.et, pt=pval.et)\t# data of effect,test, and pvlaues\n        OD <- Data[order(Data$tf,decreasing=T), ]\n        Ordered.pvalue <- OD$pt\n\n        # this part will compute P(rank|effect) emperically\n        # we will always use first plot because it will be the closest to the alternative probability\n        #-------------------------------------------------------------------------------------------\n        fun.ranksProb <- function(j)\n        {\n            pvalPerGrp <- Ordered.pvalue[(j*grpSize-grpSize+1):(j*grpSize)]\n            prob <- 1-qvalue(p=pvalPerGrp,pfdr=TRUE,pi0.method=\"bootstrap\",\n                             lambda=max(pvalPerGrp))$pi0\n            return(prob)\n        }\n        ranksProb <- sapply(1:grp, fun.ranksProb)\n        rankProbsH01 <- ranksProb/sum(ranksProb)\n\n        # need to estimate effect size to compute weight\n        #---------------------------------------------------------------------------------\n        nullProp = qvalue(Data$pt, pfdr=TRUE, pi0.method=\"bootstrap\")$pi0\n        est.et = mean(sort(Data$tt, decreasing=T)[1:m1])\n\n\n        # function to compute weight continuous case\n        #--------------------------------------\n        weight_continuous <- function(alpha,et,m,tail=2,delInterval,prob)\n        {\n            prob <- prob/sum(prob)\n            delta <- seq(0,1,delInterval)\n            findDelta <- function(delta)\n            {\n                weight <- tail*(m/alpha)*pnorm(et/2 + 1/et*log(delta/(alpha*prob)),lower.tail=TRUE)\n                return(sum(weight,na.rm=T))\n            }\n            weightSumVec <- sapply(delta,findDelta)\n            deltaOut <- delta[min(abs(weightSumVec-m))==abs(weightSumVec-m)]\n            deltaOut <- ifelse(length(deltaOut)>1,.0001,deltaOut)\n            Weight.out <- tail*(m/alpha)*pnorm(et/2 + 1/et*log(deltaOut/(alpha*prob)),lower.tail=TRUE)\n            #normWeight <- ifelse(rep(sum(Weight.out),m)==0,1,Weight.out/sum(Weight.out)*m)\n            return(Weight.out)\n        }\n\n        W_perGrp <- weight_continuous(alpha=alpha,et=est.et,m=grp,tail=1,delInterval=.0001,prob=rankProbsH01)\n        W <- rep(W_perGrp,each=grpSize)\n        weight_pro <- if(sum(W,na.rm=T)==0){rep(1,m)} else {W/sum(W,na.rm=T)*m}\t# normalizing proposed weight\n\n        # pro=proposed,bon=bonferroni,rdw=roeder and wasserman,IHW=independent Hyp Weight\n        #----------------------------------------------------------------------------------------\n        weight_rdw <- as.vector(RoederWasermanWeight(OD$tt,m=m,gamma=.05,alpha=alpha,rk=1000))\t\t# roeder wasserman weight\n        ihw_fwer <- ihw(OD$pt,OD$tf,alpha=alpha,adjustment_type = \"bonferroni\")\t\t# IHW method for FWER\n        ihw_fdr <-  ihw(OD$pt,OD$tf,alpha=alpha,adjustment_type = \"BH\")\t\t\t# IHW method for FDR\n\n        rej_pro <- OD$pt <= alpha*weight_pro/m\t\t\t# total rejections of all methods\n        rej_bon <- OD$pt <= alpha/m\n        rej_rdw <- OD$pt <= alpha*weight_rdw/m\n        rej_ihwFwer <- adj_pvalues(ihw_fwer) <= alpha\n\n        FWER_pro <- sum(rej_pro[OD$et==0])/sum(OD$et==0)\t\t\t# FWER of proposed method\n        FWER_bon <- sum(rej_bon[OD$et==0])/sum(OD$et==0)\t\t\t# FWER of bonferroni method\n        FWER_rdw <- sum(rej_rdw[OD$et==0])/sum(OD$et==0)\t\t\t# FWER of Roeder Wasserman method\n        FWER_ihw <- sum(rej_ihwFwer[OD$et==0])/sum(OD$et==0)\t\t\t# FWER of IHW method\n\n        POWER_pro <- sum(rej_pro[OD$et!=0])/max(1,sum(OD$et!=0))\t\t# power of proposed\n        POWER_bon <- sum(rej_bon[OD$et!=0])/max(1,sum(OD$et!=0))\t\t# power of bonferroni\n        POWER_rdw <- sum(rej_rdw[OD$et!=0])/max(1,sum(OD$et!=0))\t\t# power of Roeder Wasserman method\n        POWER_ihw <- sum(rej_ihwFwer[OD$et!=0])/max(1,sum(OD$et!=0))\t# power of IHW method\n\n        adjPval_pro <- p.adjust(OD$pt/weight_pro, method=\"BH\")\t# adjusted pvalue to compute FDR\n        adjPval_bon <- p.adjust(OD$pt, method=\"BH\")\n        adjPval_rdw <- p.adjust(OD$pt/weight_rdw, method=\"BH\")\n        adjPval_ihw <- adj_pvalues(ihw_fdr)\n\n        FDR_pro <- sum(adjPval_pro[OD$et==0] <= alpha)/max(1,sum(adjPval_pro <= alpha))\t# FDR of proposed\n        FDR_bh  <- sum(adjPval_bon[OD$et==0] <= alpha)/max(1,sum(adjPval_bon <= alpha))\t# FDR of benjaminin and hochberg\n        FDR_rdw <- sum(adjPval_rdw[OD$et==0] <= alpha)/max(1,sum(adjPval_rdw <= alpha))\t# FDR of wasserman\n        FDR_ihw <- sum(adjPval_ihw[OD$et==0] <= alpha)/max(1,rejections(ihw_fdr))\t\t# FDR of IHW method\n\n        FDR_POWER_pro <- sum(adjPval_pro[OD$et!=0] <= alpha)/max(1,sum(OD$et!=0))\t# FDR of proposed\n        FDR_POWER_bh  <- sum(adjPval_bon[OD$et!=0] <= alpha)/max(1,sum(OD$et!=0))\t# FDR of benjaminin and hochberg\n        FDR_POWER_rdw <- sum(adjPval_rdw[OD$et!=0] <= alpha)/max(1,sum(OD$et!=0))\t# FDR of wasserman\n        FDR_POWER_ihw <- sum(adjPval_ihw[OD$et!=0] <= alpha)/max(1,sum(OD$et!=0))\t\t# FDR of IHW method\n\n        return(c(FWER_pro,FWER_bon,FWER_rdw,FWER_ihw,POWER_pro,POWER_bon,POWER_rdw,POWER_ihw,\n                 FDR_pro,FDR_bh,FDR_rdw,FDR_ihw,FDR_POWER_pro,FDR_POWER_bh,FDR_POWER_rdw,FDR_POWER_ihw))\n    }\n    FwerPowerFdr <- sapply(1:length(effectVec),fun.FwerPowerFdr)\n    return(FwerPowerFdr)\n}\n\neffectVec <- c(seq(0,1,.2),2,3,5,8)\nsimu=3\nFwerPowerFdrPower <- sapply(1:simu,fun.simu,m=10000,null=.5,corr=0,random=0,alpha=.05,grp=5,grpSize=2000,effectVec=effectVec)\n\n\neffectVec <- c(seq(0,1,.2),2,3,5,8)\nclusterExport(cl,\"effectVec\")\ns = 1:1000\n\n\nFwerPowerFdrPower2e1 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr= 0,random=0,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower2e2 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr= 0,random=1,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower2g1 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr=.5,random=0,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower2g2 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr=.5,random=1,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower2i1 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr=.9,random=0,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower2i2 <- parSapply(cl,s,fun.simu,m=10000,null=.5,corr=.9,random=1,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\n\nFwerPowerFdrPower4e1 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr= 0,random=0,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower4e2 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr= 0,random=1,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower4g1 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr=.5,random=0,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower4g2 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr=.5,random=1,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower4i1 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr=.9,random=0,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower4i2 <- parSapply(cl,s,fun.simu,m=10000,null=.9,corr=.9,random=1,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\n\nFwerPowerFdrPower5e1 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr= 0,random=0,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower5e2 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr= 0,random=1,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower5g1 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr=.5,random=0,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower5g2 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr=.5,random=1,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower5i1 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr=.9,random=0,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\nFwerPowerFdrPower5i2 <- parSapply(cl,s,fun.simu,m=10000,null=.99,corr=.9,random=1,alpha=.05,grp=10,grpSize=1000,effectVec=effectVec)\n\n\nFwerPowerFdrPower = FwerPowerFdrPower5i1\nFwerPowerFdrPower_all = apply(FwerPowerFdrPower,1,mean,na.rm=T)\nFwerPowerFdrPower_byEffect = matrix(FwerPowerFdrPower_all,16,10,byrow=F)\n\n# plots\n#-----------\ndev.off()\npar(oma = c(1, 0, 0,0),mfrow=c(2,3))\nFwerPowerFdr <- FwerPowerFdrPower_byEffect\nmatplot(effectVec,cbind(FwerPowerFdr[1,],FwerPowerFdr[2,],FwerPowerFdr[3,],FwerPowerFdr[4,]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FWER\",ylim=c(0,max(FwerPowerFdr[1:4,],na.rm=T)))\nmatplot(effectVec,cbind(FwerPowerFdr[5,],FwerPowerFdr[6,],FwerPowerFdr[7,],FwerPowerFdr[8,]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"POWER\",ylim=c(0,1))\nmatplot(effectVec[1:6],cbind(FwerPowerFdr[5,1:6],FwerPowerFdr[6,1:6],FwerPowerFdr[7,1:6],FwerPowerFdr[8,1:6]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"POWER\",ylim=c(0,max(FwerPowerFdr[5:8,1:6],na.rm=T)))\nmatplot(effectVec,cbind(FwerPowerFdr[9,],FwerPowerFdr[10,],FwerPowerFdr[11,],FwerPowerFdr[12,]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR\")\nmatplot(effectVec,cbind(FwerPowerFdr[13,],FwerPowerFdr[14,],FwerPowerFdr[15,],FwerPowerFdr[16,]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR_POWER\")\nmatplot(effectVec[1:6],cbind(FwerPowerFdr[13,1:6],FwerPowerFdr[14,1:6],FwerPowerFdr[15,1:6],FwerPowerFdr[16,1:6]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR_POWER\")\npar(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 2, 0), new = TRUE)\nplot(0, 0, type = \"n\", bty = \"n\", xaxt = \"n\", yaxt = \"n\",main=\"null=99%,cor=.9,test effect=filter effect\")\nlegend(\"bottom\", c(\"PRO\",\"BON/BH\",\"RDW\",\"IHW\"), xpd = TRUE, horiz = TRUE, inset = c(0,\n                                                                                    0), bty = \"n\", lty=1:4, ,col=1:4, cex = 1,lwd=2)\n\n\n\n\n\n\nFwerPowerFdrPower = FwerPowerFdrPower5i2\nFwerPowerFdrPower_all = apply(FwerPowerFdrPower,1,mean,na.rm=T)\nFwerPowerFdrPower_byEffect = matrix(FwerPowerFdrPower_all,16,10,byrow=F)\n\ndev.off()\nFwerPowerFdr <- FwerPowerFdrPower_byEffect\npar(oma = c(1, 0, 0,0),mfrow=c(2,3))\nmatplot(effectVec,cbind(FwerPowerFdr[1,],FwerPowerFdr[2,],FwerPowerFdr[3,],FwerPowerFdr[4,]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FWER\",ylim=c(0,max(FwerPowerFdr[1:4,],na.rm=T)))\nmatplot(effectVec,cbind(FwerPowerFdr[5,],FwerPowerFdr[6,],FwerPowerFdr[7,],FwerPowerFdr[8,]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"POWER\",ylim=c(0,1))\nmatplot(effectVec[1:6],cbind(FwerPowerFdr[5,1:6],FwerPowerFdr[6,1:6],FwerPowerFdr[7,1:6],FwerPowerFdr[8,1:6]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"POWER\",ylim=c(0,max(FwerPowerFdr[5:8,1:6],na.rm=T)))\nmatplot(effectVec,cbind(FwerPowerFdr[9,],FwerPowerFdr[10,],FwerPowerFdr[11,],FwerPowerFdr[12,]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR\")\nmatplot(effectVec,cbind(FwerPowerFdr[13,],FwerPowerFdr[14,],FwerPowerFdr[15,],FwerPowerFdr[16,]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR_POWER\")\nmatplot(effectVec[1:6],cbind(FwerPowerFdr[13,1:6],FwerPowerFdr[14,1:6],FwerPowerFdr[15,1:6],FwerPowerFdr[16,1:6]),\n        type=\"l\",lwd=2,xlab=\"effect size\",ylab=\"FDR_POWER\")\npar(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 2, 0), new = TRUE)\nplot(0, 0, type = \"n\", bty = \"n\", xaxt = \"n\", yaxt = \"n\",main=\"null=99%,cor=.9,test effect= N(filter effect,filter effect/2)\")\nlegend(\"bottom\", c(\"PRO\",\"BH\",\"RDW\",\"IHW\"), xpd = TRUE, horiz = TRUE, inset = c(0,\n                                                                                0), bty = \"n\", lty=1:4, ,col=1:4, cex = 1,lwd=2)\n\n\n\n# see correaltion effect FWER/POWER/FDR\n#-----------------------------------------\ndev.off()\neffectVec <- c(seq(0,1,.2),2,3,5,8)\nE=FwerPowerFdrPower1e1\nF=FwerPowerFdrPower1f1\nG=FwerPowerFdrPower1g1\nH=FwerPowerFdrPower1h1\nI=FwerPowerFdrPower1i1\ncorr=c(0,.3,.5,.7,.9)\nr=1\npar(oma = c(1, 0, 0,0),mfrow=c(3,3))\nfor(e in 1:9)\t\t\t\t# effect size index\n{\n    cor_pro=c(E[r,e],    F[r,e],    G[r,e],    H[r,e],    I[r,e])\n    cor_bon=c(E[(r+1),e],F[(r+1),e],G[(r+1),e],H[(r+1),e],I[(r+1),e])\n    cor_rdw=c(E[(r+2),e],F[(r+2),e],G[(r+2),e],H[(r+2),e],I[(r+2),e])\n    cor_ihw=c(E[(r+3),e],F[(r+3),e],G[(r+3),e],H[(r+3),e],I[(r+3),e])\n    matplot(corr,cbind(cor_pro,cor_bon,cor_rdw,cor_ihw),type=\"l\",lwd=2,ylab=\"FWER\",\n            xlab=\"correlation\",main=paste(\"effect size=\",effectVec[e]))\n}\npar(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 2, 0), new = TRUE)\nplot(0, 0, type = \"n\", bty = \"n\", xaxt = \"n\", yaxt = \"n\",main=\"null=20%,test effect=filter effect\")\nlegend(\"bottom\", c(\"PRO\",\"BOH\",\"RDW\",\"IHW\"), xpd = TRUE, horiz = TRUE, inset = c(0,\n                                                                                 0), bty = \"n\", lty=1:4, ,col=1:4, cex = 1,lwd=3)\n\n\n\n\n\n\n\n\n\npropH0 <- rep(c(.5,.9,.99),each=72)\nrandom <- rep(rep(c(0,1),each=12),9)\ncor = rep(rep(c(0,.5,.9),each=24),3)\nresult_type = rep(rep(c(\"Fwer\",\"Power\",\"Fdr\"),each=4),18)\n\ncolname <- paste(\"ef\",effectVec,sep=\"\")\ndat <- rbind(FwerPowerFdr1a,FwerPowerFdr1b,FwerPowerFdr1c,FwerPowerFdr1d,FwerPowerFdr1e,FwerPowerFdr1f,\n             FwerPowerFdr2a,FwerPowerFdr2b,FwerPowerFdr2c,FwerPowerFdr2d,FwerPowerFdr2e,FwerPowerFdr2f,\n             FwerPowerFdr3a,FwerPowerFdr3b,FwerPowerFdr3c,FwerPowerFdr3d,FwerPowerFdr3e,FwerPowerFdr3f)\ncolnames(dat) <- colname\ndatfinal <- data.frame(propH0,cor,random,result_type,dat)\nwrite.csv(datfinal,file=\"data.csv\",row.names=F)\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1496089075593.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "85758461",
    "id" : "C9F8FAF4",
    "lastKnownWriteTime" : 1496089386,
    "last_content_update" : 1496089386187,
    "path" : "U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-2/Article-2-version-1.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}