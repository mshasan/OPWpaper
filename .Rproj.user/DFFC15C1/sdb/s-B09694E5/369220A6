{
    "collab_server" : "",
    "contents" : "#' @title Funciton to plot nice plots\n#'\n#' @description \\code{OPWpaper} has stored .RDATA from the simulation. This\n#' function will use those simulated data to plots\n#'\n#' @param x_vec a vector of values corresponds to x-axis\n#' @param y_matrix a matrix of values correspond to y-axix for multiple plots\n#' @param fdr determine whether FDR or FWER will be used, default is FDR\n#' @param power determine whether power will be plotted, default is TRUE\n#' @param low_eff_plot deteremine whether power of the low effect sizes will be plotted, default is FALSE\n#' @param null the proportion of the true null if power or FDR/FWER is plotted against the effect sizes\n#' @param cv the value of the coefficient of variation if power is plotted against effect sizes\n#' @param ey the value of the effect size if power is plotted against the proportion of the true null\n#' @param cor the value of the correlation if the figure is for the ranks probability\n#' @param figure types of figure will be plotted c(\"ranksProb\", \"nullPropVsPower\", \"effectVsFPFP\", \"CV\")\n#'\n#' @details\n#' \\code{OPWeight} package proposed methods to compute the probabilities\n#' of the rank of test given the effect size to obtian the optimal power.\n#' This function is desigend to plot the power curves under different scenerio.\n#' Note that, we alreday simulated power and FDR/FWER for the different scenerios\n#' and stored in the packages *OPWpaper* as .RDATA. This function will only\n#' be able to use those data sets or data with the similar formats.\n#'\n#'\n#' @author Mohamad S. Hasan, \\email{mshasan@uga.edu}\n#' @export\n#'\n#'\n#' @return \\code{Data}\n#' A plot of multiple curves\n#'\n#' @references Hasan and Schliekelman (2017)\n#'\n#' @examples\n#' # only just examples from the previously stored .RDATA\n#' # plot of power against the effect sizes\n#' # p_.5_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower2e1,\n#' #                                null = 50, figure = \"effectVsFPFP\")\n#' # p_.9_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower4e1,\n#' #                                null = 90, figure = \"effectVsFPFP\")\n#' # p_.99_eq_power<- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower5e1,\n#' #                                null = 99, figure = \"effectVsFPFP\")\n#'\n#' # p_.5_low_ef_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower2e1,\n#' #                       null = 50, low_eff_plot = TRUE, figure = \"effectVsFPFP\")\n#' # p_.9_low_ef_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower4e1,\n#' #                       null = 90, low_eff_plot = TRUE, figure = \"effectVsFPFP\")\n#' # p_.99_low_ef_eq_power<- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower5e1,\n#' #                       null = 99, low_eff_plot = TRUE, figure = \"effectVsFPFP\")\n#'\n#' # p_eq_power = plot_grid(p_.5_eq_power, p_.9_eq_power, p_.99_eq_power,\n#' #                    p_.5_low_ef_eq_power, p_.9_low_ef_eq_power, p_.99_low_ef_eq_power,\n#' #                    ncol = 3, labels = letters[1:3], align = 'hv')\n#' # title <- ggdraw() + draw_label(\"Power: et = ey\")\n#' # plot_grid(title, p_eq_power, legend, ncol = 1, rel_heights=c(.1, 1, .1))\n#'\n#' # plot of power against the true propotion of the null\n#' # mat_ef.6 <- rbind(FwerPowerFdrPower1f1[13:16, 4], FwerPowerFdrPower2f1[13:16, 4],\n#' # FwerPowerFdrPower3f1[13:16, 4], FwerPowerFdrPower4f1[13:16, 4],\n#' # FwerPowerFdrPower5f1[13:16, 4])\n#' # p_ef.6 <- nice_plots(x_vec = nullProp, y_matrix = mat_ef.6, fdr = TRUE,\n#' # power = TRUE, ey = 0.6, figure = \"nullPropVsPower\")\n\n#'\n#===============================================================================\n# inpout:----------------\n# x_vec = a vector of values corresponds to x-axis\n# y_matrix = a matrix of values correspond to y-axix for multiple plots\n# fdr = determine whether FDR or FWER will be used, default is FDR\n# power = determine whether power will be plotted, default is TRUE\n# low_eff_plot = deteremine whether power of the low effect sizes will be plotted, default is FALSE\n# null = the proportion of the true null if power or FDR/FWER is plotted against the effect sizes\n# cv = the value of the coefficient of variation if power is plotted against effect sizes\n# ey = the value of the effect size if power is plotted against the proportion of the true null\n# cor = the value of the correlation if the figure is for the ranks probability\n# figure = types of figure will be plotted c(\"ranksProb\", \"nullPropVsPower\", \"effectVsFPFP\", \"CV\")\n#\n# internal parameters:-----\n# x_axis = variable name of the x-axis\n# x_lab = label of the x-axis\n# y_lab = label of the y_axix\n# dat = a data matrix of x-axis and y-axis values\n#\n# prob0 = probability of rank of a null test by simulation\n# prob1 = probability of rank of an alternative test by simulation\n# prob0, prob1 =  rank may generate missing valuse because of the large effcet size,\n# therefore, to make a matplot equal vectors size are needed. This procedure\n# will replace the missing value to make equal sized vector\n# probability of rank of a null test\n#\n# prob0_exact = probability of rank of a null test by exact mehtod\n# prob1_exact = probability of rank of an alternative test by exact mehtod\n# do not compute probability for a large number of tests\n#\n# prob0_approx = probability of rank of a null test by normal approximaiton\n# prob1_exact = probability of rank of an alternative test by normal approximaiton\n#\n# output:---------------\n# plots\n#\n#===============================================================================\n# function to generate nice plots------------\n\nnice_plots <- function(x_vec, y_matrix, fdr = TRUE, power = TRUE, low_eff_plot = FALSE,\n                       null = NULL, cv = NULL, ey = NULL, cor = NULL,\n                       figure = c(\"ranksProb\", \"nullPropVsPower\", \"effectVsFPFP\", \"CV\"))\n    {\n        # configure data sets-------------\n        if(figure == \"ranksProb\"){\n\n            x_axis = \"ranks\"\n            x_lab = \"Ranks\"\n            y_lab = \"p(ranks | effect)\"\n            dat <- data.frame(x_vec, y_matrix)\n\n        } else if(figure == \"nullPropVsPower\"){\n\n            x_axis <- \"nullProp\"\n            x_lab = \"Prop. of null\"\n            y_lab <- \"Power\"\n            dat <- data.frame(x_vec, y_matrix)\n\n        } else {\n\n            if(fdr == FALSE & power == FALSE){\n                row_indx <- 1:4\n                y_lab <- \"FWER\"\n            } else if(fdr == FALSE & power == TRUE) {\n                row_indx <- 5:8\n                y_lab <- \"Power\"\n            } else if(fdr == TRUE & power == FALSE){\n                row_indx <- 9:12\n                y_lab <- \"FDR\"\n            } else {\n                row_indx <- 13:16\n                y_lab <- \"Power\"\n            }\n\n            x_axis <- \"effectSize\"\n            x_lab = \"Mean filter effect (ey)\"\n            dat <- data.frame(x_vec, t(y_matrix[row_indx, ]))\n\n       }\n\n\n        # label the columns--------\n        if(figure == \"ranksProb\"){\n            colnames(dat) <- c(x_axis, \"FH0\",\"FH1\",\"TH0\",\"TH1\")\n        } else {\n            colnames(dat) <- c(x_axis, \"PRO\", \"BH\", \"RDW\", \"IHW\")\n        }\n\n\n        # initial plot with melted data-------------\n        if(low_eff_plot == FALSE){\n            dat_melt <- melt(dat, id.var = x_axis)\n            plt <- ggplot(dat_melt, aes(x = dat_melt[,1], y = dat_melt$value,\n                                        group = dat_melt$variable, col = dat_melt$variable))\n        } else {\n            y_lab <- \"log(power)\"\n            dat <- dat[1:6, ]\n            dat_melt <- melt(dat, id.var = x_axis)\n            plt <- ggplot(dat_melt, aes(x = dat_melt[,1], y = log(dat_melt$value),\n                                        group = dat_melt$variable, col = dat_melt$variable))\n        }\n\n\n        # fixed the tilte of the plot---------------\n        if(figure == \"ranksProb\"){\n            titl <- paste0(\"cor = \", cor)\n        } else if(figure == \"nullPropVsPower\"){\n            titl <- paste0(\"ey = \", ey)\n        } else if(figure == \"effectVsFPFP\"){\n            titl <- paste0(\"null = \", null, \"%\")\n        } else {\n            titl <- paste0(\"cv = \", cv)\n        }\n\n\n        # final plot with titles and labels----------\n        plt = plt + geom_line(aes(linetype = dat_melt$variable), size = 1.5) +\n            labs(x = x_lab, y = y_lab, title = if(low_eff_plot == FALSE){titl}) +\n            theme(legend.position = \"none\",\n                  axis.title.x = element_text(size = rel(.8)),\n                  axis.title.y = element_text(size = rel(.8)))\n\n        return(plt)\n    }\n",
    "created" : 1496791689698.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2479983337",
    "id" : "369220A6",
    "lastKnownWriteTime" : 1496809181,
    "last_content_update" : 1496809181451,
    "path" : "C:/Users/Apu-Jerrica/Google Drive/My R Packages/OPWpaper/R/nice_plots.R",
    "project_path" : "R/nice_plots.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}