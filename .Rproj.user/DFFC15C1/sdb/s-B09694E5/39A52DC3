{
    "collab_server" : "",
    "contents" : "#' @title Relationship between filter and test effect sizes\n#'\n#' @description Compute the relationship between filter and test effect sizes interms of\n#' the probability of the rank of the test given the test effect sizes\n#'\n#' @param r rank of the test statistics\n#' @param rho correlation between the filter and test efect sizes\n#' @param H0 determine null or alternative hypotheisis; H0 = 0 for null and H0 = 1 for alternative\n#' @param ed mean effect size of the test statistics\n#' @param m0 number of the true null hypothesis\n#' @param m1 number of the true alternative hypothesis\n#'\n#' @details Compute the relationship between filter and test effect sizes interms of\n#' the probability of the rank of the tes given the test effect sizes. The weight\n#' identity is based on the test effect size; however, the ranks probability needs\n#' to compute from the filter effect. Therefore, it is expected that there is a\n#' relationship between the filter and test effect sizes.\n#'\n#' @author Mohamad S. Hasan and Paul Schliekelman\n#' @export\n#' @import stats\n#' @seealso \\code{\\link{prob_rank_givenEffect}}\n#'\n#' @return \\code{prob} probability of the rank given the mean test effect\n#' @examples\n#' ranks = 1:100\n#' prob_test0 <- sapply(ranks, probRel_filterVstest_effect, rho = .8,\n#'                        H0 = 0, ed = 2, m0 = 90, m1 = 10)\n#'\n#' prob_test1 <- sapply(ranks, probRel_filterVstest_effect, rho=.8,\n#'                        H0 = 1, ed = 2, m0 = 90, m1 = 10)\n#'\n#' prob0 <- sapply(ranks, prob_rank_givenEffect, et = 0, ey = 2,\n#'                                            m0 = 90, m1 = 10)\n#'\n#' prob1 <- sapply(ranks, prob_rank_givenEffect, et = 2, ey = 2,\n#'                                            m0 = 90, m1 = 10)\n#'\n#' matplot(1:100, cbind(prob_test0, prob_test1, prob0, prob1),\n#'                      type = \"l\", xlab = \"ranks\", ylab = \"p(rank | effect)\")\n#' legend(\"topright\", legend = c(\"prob_test0\", \"prob_test1\", \"prob0\", \"prob1\"),\n#'                        col = 1:4, lty = 1:4, lwd = 2)\n#'\n#===============================================================================\n# function to compute \"P(rank|effect) by effect size for m=10,000\"\n#\n# Input:----------\n# r = rank of the test statistics\n# rho = correlation between the filter and test efect sizes\n# H0 = determine null or alternative hypotheisis; H0 = 0 for null and H0 = 1 for\n# alternative\n# ed = mean effect size of the test statistics\n# m0 = number of the true null hypothesis\n# m1 = number of the true alternative hypothesis\n#\n# internal parameters:----------\n# mean_ey = conditional mean of the filter effect\n# sd_ey = conditional standard deviation of the filter effect\n# ey_val = a vector of the filter effects\n# et = mean test effect\n# probs_per_ey = probability of the rank of the test for each mean filter effect\n#\n# output:-----------\n# prob = probability of the rank given the mean test effect\n#===============================================================================\n\nprobRel_filterVstest_effect <- function(r, rho, H0, ed, m0, m1)\n    {\n        mean_ey = rho*ed\n        sd_ey = sqrt(1 - rho*rho)\n        ey_val = rnorm(100, mean_ey, sd_ey)\n\n        prob_condition_ey <- function(ey)\n            {\n                et <- ifelse(H0 == 0, 0, ey)\n                probs_per_ey = prob_rank_givenEffect(k = r, et = et, ey = ey,\n                                                     m0 = m0, m1 = m1)\n                return(probs_per_ey)\n            }\n\n        prob_per_r = mean(sapply(ey_val,  prob_condition_ey))\n        return(prob_per_r)\n    }\n\n\n",
    "created" : 1496809291257.000,
    "dirty" : true,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "251017980",
    "id" : "39A52DC3",
    "lastKnownWriteTime" : 1495109642,
    "last_content_update" : 1496836468564,
    "path" : "C:/Users/Apu-Jerrica/Google Drive/My R Packages/OPWpaper/R/probRel_filterVstest_effect.R",
    "project_path" : "R/probRel_filterVstest_effect.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}