axis.title.y = element_text(size = rel(.7)))
}
g
g <- list()
for(i in 1:3)
{
probData <- probData_com[[i]]
colnames(probData) <- c("ranks", "SH0","SH1","EH0","EH1","AH0","AH1")
dat <- melt(probData, id.var = "ranks")
ey_val <- ifelse(effectType == "binary", i-1,
ifelse(i==1, 0, paste0("U(",i-2,", ", i-1,")")))
eySm <- ifelse(effectType == "binary", "ey = ", "ey ~ ")
g[[i]] = ggplot(dat, aes_string(x = "ranks", y = "value", group = "variable",
colour = "variable")) +
geom_line(aes_string(linetype = "variable"), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", size = 20,
subtitle = paste0(eySm, ey_val, ", e.one = ", e.one)) +
theme(legend.title = element_blank(),
axis.title.x = element_text(size = rel(.7)),
axis.title.y = element_text(size = rel(.7)))
}
setwd("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1")
library(OPWeight)       # library for the proposed method
library(OPWpaper)
library(ggplot2)
library(grid)
library(gridExtra)      # for multiplots in the same page
library(xtable)
library(reshape2)       # library for the melt function
library(cowplot)        # plot_grid function
load("simu_prob_rank_givenEffect.RDATA")
j=1
effectType = "continuous"
e.one <- j-1
probData_com <- eval(parse(text=paste0("prob_",m0,"_",e.one, effType)))
m0=20
probData_com <- eval(parse(text=paste0("prob_",m0,"_",e.one, effType)))
effType <- ifelse(effectType == "binary", "_bin", "_cont")
probData_com <- eval(parse(text=paste0("prob_",m0,"_",e.one, effType)))
g <- list()
for(i in 1:3)
{
probData <- probData_com[[i]]
colnames(probData) <- c("ranks", "SH0","SH1","EH0","EH1","AH0","AH1")
dat <- melt(probData, id.var = "ranks")
ey_val <- ifelse(effectType == "binary", i-1,
ifelse(i==1, 0, paste0("U(",i-2,", ", i-1,")")))
eySm <- ifelse(effectType == "binary", "ey = ", "ey ~ ")
g[[i]] = ggplot(dat, aes_string(x = "ranks", y = "value", group = "variable",
colour = "variable")) +
geom_line(aes_string(linetype = "variable"), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", size = 20,
subtitle = paste0(eySm, ey_val, ", e.one = ", e.one)) +
theme(legend.title = element_blank(),
axis.title.x = element_text(size = rel(.7)),
axis.title.y = element_text(size = rel(.7)))
}
g
ranksProb_compare_plots <- function(m0, effectType = c("binary", "continuous"))
{
effType <- ifelse(effectType == "binary", "_bin", "_cont")
prow <- list()
for(j in 1:3)
{
e.one <- j-1
# make text into varriable name
probData_com <- eval(parse(text=paste0("prob_",m0,"_",e.one, effType)))
g <- list()
for(i in 1:3)
{
probData <- probData_com[[i]]
colnames(probData) <- c("ranks", "SH0","SH1","EH0","EH1","AH0","AH1")
dat <- melt(probData, id.var = "ranks")
ey_val <- ifelse(effectType == "binary", i-1,
ifelse(i==1, 0, paste0("U(",i-2,", ", i-1,")")))
eySm <- ifelse(effectType == "binary", "ey = ", "ey ~ ")
g[[i]] = ggplot(dat, aes_string(x = "ranks", y = "value", group = "variable",
colour = "variable")) +
geom_line(aes_string(linetype = "variable"), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", size = 20,
subtitle = paste0(eySm, ey_val, ", e.one = ", e.one)) +
theme(legend.title = element_blank(),
axis.title.x = element_text(size = rel(.7)),
axis.title.y = element_text(size = rel(.7)))
}
# extract the legend from one of the plots
legend <- get_legend(g[[1]] + theme(legend.direction="horizontal",
legend.position="bottom"))
# arrange the three plots in a single row
prow[[j]] <- plot_grid(g[[1]] + theme(legend.position="none"),
g[[2]] + theme(legend.position="none"),
g[[3]] + theme(legend.position="none"),
align = 'hv', nrow = 1, labels = letters[(3*j-3+1):(3*j)])
}
effType2 <- ifelse(effectType == "binary", "Binary: m0 = ", "Continuous: m0 = ")
pp = plot_grid(prow[[1]], prow[[2]], prow[[3]], nrow = 3, align = 'hv')
# now add the title
title <- ggdraw() + draw_label(paste(effType2, m0, ", m1 = ", 100-m0))
plots = plot_grid(title, pp, legend, ncol = 1, rel_heights=c(0.1, 1, .1))
return(list(plots))
}
lapply(20, ranksProb_plots, effectType = "continuous")
lapply(20, ranksProb_compare_plots, effectType = "continuous")
load("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_fwerPowerFdrPower_cont.RDATA")
# this part is for legend------------------------------------------------------
dat_99 <- data.frame(ey_vec, t(FwerPowerFdrPower5e1[13:16,]))
colnames(dat_99) <- c("effectSize", "PRO", "BH", "RDW", "IHW")
dat_99_par <- melt(dat_99[1:6,], id.var = "effectSize")
p_99_par <- ggplot(dat_99_par, aes(x = effectSize, y = value,group = variable,
col=variable)) +
geom_line(aes(linetype = variable), size = 1.5) +
labs(x = "ey", y = "power", title = "null = 99%") +
theme(legend.title = element_blank())
# legend for c("PRO", "BH/BON", "RDW", "IHW")
legend <- get_legend(p_99_par + theme(legend.direction = "horizontal",
legend.position = "bottom"))
#
ey_vec <- c(seq(0, 1, .2), 2, 3, 5, 8)
# this part is for legend------------------------------------------------------
ey_vec <- c(seq(0, 1, .2), 2, 3, 5, 8)
dat_99 <- data.frame(ey_vec, t(FwerPowerFdrPower5e1[13:16,]))
colnames(dat_99) <- c("effectSize", "PRO", "BH", "RDW", "IHW")
dat_99_par <- melt(dat_99[1:6,], id.var = "effectSize")
p_99_par <- ggplot(dat_99_par, aes(x = effectSize, y = value,group = variable,
col=variable)) +
geom_line(aes(linetype = variable), size = 1.5) +
labs(x = "ey", y = "power", title = "null = 99%") +
theme(legend.title = element_blank())
# legend for c("PRO", "BH/BON", "RDW", "IHW")
legend <- get_legend(p_99_par + theme(legend.direction = "horizontal",
legend.position = "bottom"))
#--------------end: legend------------------------------------------------------
FwerPowerFdrPower2e1
filterEffectVec = ey_vec
FwerPowerFdrPower = FwerPowerFdrPower2e1
x_vec = ey_vec
y_matrix = FwerPowerFdrPower2e1
null = 50
figure = "effectVsFPFP"
if(figure == "nullPropVsPower"){
x_axis <- "nullProp"
x_lab = "Prop. of null"
y_lab <- "Power"
dat <- data.frame(x_vec, y_matrix)
} else {
if(fdr == FALSE & power == FALSE){
row_indx <- 1:4
y_lab <- "FWER"
} else if(fdr == FALSE & power == TRUE) {
row_indx <- 5:8
y_lab <- "Power"
} else if(fdr == TRUE & power == FALSE){
row_indx <- 9:12
y_lab <- "FDR"
} else {
row_indx <- 13:16
y_lab <- "Power"
}
x_axis <- "effectSize"
x_lab = "Mean filter effect (ey)"
dat <- data.frame(x_vec, t(y_matrix[row_indx, ]))
}
fdr = TRUE
power = TRUE
low_eff_plot = FALSE
null = NULL
cv = NULL
ey = NULL
if(figure == "nullPropVsPower"){
x_axis <- "nullProp"
x_lab = "Prop. of null"
y_lab <- "Power"
dat <- data.frame(x_vec, y_matrix)
} else {
if(fdr == FALSE & power == FALSE){
row_indx <- 1:4
y_lab <- "FWER"
} else if(fdr == FALSE & power == TRUE) {
row_indx <- 5:8
y_lab <- "Power"
} else if(fdr == TRUE & power == FALSE){
row_indx <- 9:12
y_lab <- "FDR"
} else {
row_indx <- 13:16
y_lab <- "Power"
}
x_axis <- "effectSize"
x_lab = "Mean filter effect (ey)"
dat <- data.frame(x_vec, t(y_matrix[row_indx, ]))
}
colnames(dat) <- c(x_axis, "PRO", "BH", "RDW", "IHW")
if(figure == "ranksProb"){
x_axis = "ranks"
x_lab = "Ranks"
y_lab = "p(ranks | effect)"
dat <- data.frame(x_vec, y_matrix)
} else if(figure == "nullPropVsPower"){
x_axis <- "nullProp"
x_lab = "Prop. of null"
y_lab <- "Power"
dat <- data.frame(x_vec, y_matrix)
} else {
if(fdr == FALSE & power == FALSE){
row_indx <- 1:4
y_lab <- "FWER"
} else if(fdr == FALSE & power == TRUE) {
row_indx <- 5:8
y_lab <- "Power"
} else if(fdr == TRUE & power == FALSE){
row_indx <- 9:12
y_lab <- "FDR"
} else {
row_indx <- 13:16
y_lab <- "Power"
}
x_axis <- "effectSize"
x_lab = "Mean filter effect (ey)"
dat <- data.frame(x_vec, t(y_matrix[row_indx, ]))
}
if(figure == "ranksProb"){
colnames(dat) <- c(x_axis, "FH0","FH1","TH0","TH1")
} else {
colnames(dat) <- c(x_axis, "PRO", "BH", "RDW", "IHW")
}
dat
names(dat_melt)[[1]]
dat_melt <- melt(dat, id.var = x_axis)
dat_melt
names(dat_melt)[[1]]
dat[1:6, ]
if(low_eff_plot == FALSE){
dat_melt <- melt(dat, id.var = x_axis)
plt <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = "variable", col = "variable"))
} else {
y_lab <- "log(power)"
dat <- dat[1:6, ]
dat_melt <- melt(dat, id.var = x_axis)
plt <- ggplot(dat_melt, aes(x = names(dat_melt)[[1]], y = log("value"),
group = "variable", col = "variable"))
}
low_eff_plot = TRUE
if(low_eff_plot == FALSE){
dat_melt <- melt(dat, id.var = x_axis)
plt <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = "variable", col = "variable"))
} else {
y_lab <- "log(power)"
dat <- dat[1:6, ]
dat_melt <- melt(dat, id.var = x_axis)
plt <- ggplot(dat_melt, aes(x = names(dat_melt)[[1]], y = log("value"),
group = "variable", col = "variable"))
}
if(figure == "ranksProb"){
titl <- paste0("cor = ", cor)
} else if(figure == "nullPropVsPower"){
titl <- paste0("ey = ", ey)
} else if(figure == "effectVsFPFP"){
titl <- paste0("null = ", null, "%")
} else {
titl <- paste0("cv = ", cv)
}
nice_plots <- function(x_vec, y_matrix, fdr = TRUE, power = TRUE, low_eff_plot = FALSE,
null = NULL, cv = NULL, ey = NULL, cor = NULL,
figure = c("ranksProb", "nullPropVsPower", "effectVsFPFP", "CV"))
{
# configure data sets-------------
if(figure == "ranksProb"){
x_axis = "ranks"
x_lab = "Ranks"
y_lab = "p(ranks | effect)"
dat <- data.frame(x_vec, y_matrix)
} else if(figure == "nullPropVsPower"){
x_axis <- "nullProp"
x_lab = "Prop. of null"
y_lab <- "Power"
dat <- data.frame(x_vec, y_matrix)
} else {
if(fdr == FALSE & power == FALSE){
row_indx <- 1:4
y_lab <- "FWER"
} else if(fdr == FALSE & power == TRUE) {
row_indx <- 5:8
y_lab <- "Power"
} else if(fdr == TRUE & power == FALSE){
row_indx <- 9:12
y_lab <- "FDR"
} else {
row_indx <- 13:16
y_lab <- "Power"
}
x_axis <- "effectSize"
x_lab = "Mean filter effect (ey)"
dat <- data.frame(x_vec, t(y_matrix[row_indx, ]))
}
# label the columns--------
if(figure == "ranksProb"){
colnames(dat) <- c(x_axis, "FH0","FH1","TH0","TH1")
} else {
colnames(dat) <- c(x_axis, "PRO", "BH", "RDW", "IHW")
}
# initial plot with melted data-------------
if(low_eff_plot == FALSE){
dat_melt <- melt(dat, id.var = x_axis)
plt <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = "variable", col = "variable"))
} else {
y_lab <- "log(power)"
dat <- dat[1:6, ]
dat_melt <- melt(dat, id.var = x_axis)
plt <- ggplot(dat_melt, aes(x = names(dat_melt)[[1]], y = log("value"),
group = "variable", col = "variable"))
}
# fixed the tilte of the plot---------------
if(figure == "ranksProb"){
titl <- paste0("cor = ", cor)
} else if(figure == "nullPropVsPower"){
titl <- paste0("ey = ", ey)
} else if(figure == "effectVsFPFP"){
titl <- paste0("null = ", null, "%")
} else {
titl <- paste0("cv = ", cv)
}
# final plot with titles and labels----------
plt = plt + geom_line(aes(linetype = dat_melt$variable), size = 1.5) +
labs(x = x_lab, y = y_lab, title = if(low_eff_plot == FALSE){titl}) +
theme(legend.position = "none",
axis.title.x = element_text(size = rel(.8)),
axis.title.y = element_text(size = rel(.8)))
return(plt)
}
p_.5_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower2e1, null = 50, figure = "effectVsFPFP")
p_.9_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower4e1, null = 90, figure = "effectVsFPFP")
p_.99_eq_power<- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower5e1, null = 99, figure = "effectVsFPFP")
p_.5_low_ef_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower2e1, null = 50, low_eff_plot = TRUE, figure = "effectVsFPFP")
p_.9_low_ef_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower4e1, null = 90, low_eff_plot = TRUE, figure = "effectVsFPFP")
p_.99_low_ef_eq_power<- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower5e1, null = 99, low_eff_plot = TRUE, figure = "effectVsFPFP")
p_eq_power = plot_grid(p_.5_eq_power, p_.9_eq_power, p_.99_eq_power,
p_.5_low_ef_eq_power, p_.9_low_ef_eq_power, p_.99_low_ef_eq_power,
ncol = 3, labels = letters[1:3], align = 'hv')
title <- ggdraw() + draw_label("Power: et = ey")
plot_grid(title, p_eq_power, legend, ncol = 1, rel_heights=c(.1, 1, .1))
nice_plots <- function(x_vec, y_matrix, fdr = TRUE, power = TRUE, low_eff_plot = FALSE,
null = NULL, cv = NULL, ey = NULL, cor = NULL,
figure = c("ranksProb", "nullPropVsPower", "effectVsFPFP", "CV"))
{
# configure data sets-------------
if(figure == "ranksProb"){
x_axis = "ranks"
x_lab = "Ranks"
y_lab = "p(ranks | effect)"
dat <- data.frame(x_vec, y_matrix)
} else if(figure == "nullPropVsPower"){
x_axis <- "nullProp"
x_lab = "Prop. of null"
y_lab <- "Power"
dat <- data.frame(x_vec, y_matrix)
} else {
if(fdr == FALSE & power == FALSE){
row_indx <- 1:4
y_lab <- "FWER"
} else if(fdr == FALSE & power == TRUE) {
row_indx <- 5:8
y_lab <- "Power"
} else if(fdr == TRUE & power == FALSE){
row_indx <- 9:12
y_lab <- "FDR"
} else {
row_indx <- 13:16
y_lab <- "Power"
}
x_axis <- "effectSize"
x_lab = "Mean filter effect (ey)"
dat <- data.frame(x_vec, t(y_matrix[row_indx, ]))
}
# label the columns--------
if(figure == "ranksProb"){
colnames(dat) <- c(x_axis, "FH0","FH1","TH0","TH1")
} else {
colnames(dat) <- c(x_axis, "PRO", "BH", "RDW", "IHW")
}
# initial plot with melted data-------------
if(low_eff_plot == FALSE){
dat_melt <- melt(dat, id.var = x_axis)
plt <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = "variable", col = "variable"))
} else {
y_lab <- "log(power)"
dat <- dat[1:6, ]
dat_melt <- melt(dat, id.var = x_axis)
plt <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = log("value"),
group = "variable", col = "variable"))
}
# fixed the tilte of the plot---------------
if(figure == "ranksProb"){
titl <- paste0("cor = ", cor)
} else if(figure == "nullPropVsPower"){
titl <- paste0("ey = ", ey)
} else if(figure == "effectVsFPFP"){
titl <- paste0("null = ", null, "%")
} else {
titl <- paste0("cv = ", cv)
}
# final plot with titles and labels----------
plt = plt + geom_line(aes(linetype = dat_melt$variable), size = 1.5) +
labs(x = x_lab, y = y_lab, title = if(low_eff_plot == FALSE){titl}) +
theme(legend.position = "none",
axis.title.x = element_text(size = rel(.8)),
axis.title.y = element_text(size = rel(.8)))
return(plt)
}
p_.5_low_ef_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower2e1, null = 50, low_eff_plot = TRUE, figure = "effectVsFPFP")
?aes_
dat
log(dat[2:5])
log(dat[,2:5])
dat[, 2:5] <- log(dat[,2:5])
dat
nice_plots <- function(x_vec, y_matrix, fdr = TRUE, power = TRUE, low_eff_plot = FALSE,
null = NULL, cv = NULL, ey = NULL, cor = NULL,
figure = c("ranksProb", "nullPropVsPower", "effectVsFPFP", "CV"))
{
# configure data sets-------------
if(figure == "ranksProb"){
x_axis = "ranks"
x_lab = "Ranks"
y_lab = "p(ranks | effect)"
dat <- data.frame(x_vec, y_matrix)
} else if(figure == "nullPropVsPower"){
x_axis <- "nullProp"
x_lab = "Prop. of null"
y_lab <- "Power"
dat <- data.frame(x_vec, y_matrix)
} else {
if(fdr == FALSE & power == FALSE){
row_indx <- 1:4
y_lab <- "FWER"
} else if(fdr == FALSE & power == TRUE) {
row_indx <- 5:8
y_lab <- "Power"
} else if(fdr == TRUE & power == FALSE){
row_indx <- 9:12
y_lab <- "FDR"
} else {
row_indx <- 13:16
y_lab <- "Power"
}
x_axis <- "effectSize"
x_lab = "Mean filter effect (ey)"
dat <- data.frame(x_vec, t(y_matrix[row_indx, ]))
}
# label the columns--------
if(figure == "ranksProb"){
colnames(dat) <- c(x_axis, "FH0","FH1","TH0","TH1")
} else {
colnames(dat) <- c(x_axis, "PRO", "BH", "RDW", "IHW")
}
# initial plot with melted data-------------
if(low_eff_plot == FALSE){
dat_melt <- melt(dat, id.var = x_axis)
plt <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = "variable", col = "variable"))
} else {
y_lab <- "log(power)"
dat <- dat[1:6, ]
dat[,2:5] <- log(dat[,2:5])
dat_melt <- melt(dat, id.var = x_axis)
plt <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = "variable", col = "variable"))
}
# fixed the tilte of the plot---------------
if(figure == "ranksProb"){
titl <- paste0("cor = ", cor)
} else if(figure == "nullPropVsPower"){
titl <- paste0("ey = ", ey)
} else if(figure == "effectVsFPFP"){
titl <- paste0("null = ", null, "%")
} else {
titl <- paste0("cv = ", cv)
}
# final plot with titles and labels----------
plt = plt + geom_line(aes_string(linetype = "variable"), size = 1.5) +
labs(x = x_lab, y = y_lab, title = if(low_eff_plot == FALSE){titl}) +
theme(legend.position = "none",
axis.title.x = element_text(size = rel(.8)),
axis.title.y = element_text(size = rel(.8)))
return(plt)
}
p_.5_low_ef_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower2e1, null = 50, low_eff_plot = TRUE, figure = "effectVsFPFP")
p_.9_low_ef_eq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower4e1, null = 90, low_eff_plot = TRUE, figure = "effectVsFPFP")
p_.99_low_ef_eq_power<- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower5e1, null = 99, low_eff_plot = TRUE, figure = "effectVsFPFP")
p_eq_power = plot_grid(p_.5_eq_power, p_.9_eq_power, p_.99_eq_power,
p_.5_low_ef_eq_power, p_.9_low_ef_eq_power, p_.99_low_ef_eq_power,
ncol = 3, labels = letters[1:3], align = 'hv')
title <- ggdraw() + draw_label("Power: et = ey")
plot_grid(title, p_eq_power, legend, ncol = 1, rel_heights=c(.1, 1, .1))
# plots of power for
# mean test effect(et) ~ Normal (mean filter effect, mean filter effect/2) (i.e cv = 1/2)
#-----------------------------------------------------------------------------------------
p_.5_uneq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower2e2, null = 50, figure = "effectVsFPFP")
p_.9_uneq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower4e2, null = 90, figure = "effectVsFPFP")
p_.99_uneq_power<- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower5e2, null = 99, figure = "effectVsFPFP")
p_.5_low_ef_uneq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower2e2, null = 50, low_eff_plot = TRUE, figure = "effectVsFPFP")
p_.9_low_ef_uneq_power <- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower4e2, null = 90, low_eff_plot = TRUE, figure = "effectVsFPFP")
p_.99_low_ef_uneq_power<- nice_plots(x_vec = ey_vec, y_matrix = FwerPowerFdrPower5e2, null = 99, low_eff_plot = TRUE, figure = "effectVsFPFP")
p_uneq_power = plot_grid(p_.5_uneq_power, p_.9_uneq_power, p_.99_uneq_power,
p_.5_low_ef_uneq_power, p_.9_low_ef_uneq_power, p_.99_low_ef_uneq_power,
ncol = 3, labels = letters[1:3], align = 'hv')
title <- ggdraw() + draw_label("Power: et ~ Normal(ey, ey/2)")
plot_grid(title, p_uneq_power, legend, ncol = 1, rel_heights=c(.1, 1, .1))
plot_grid(title, p_uneq_power, legend, ncol = 1, rel_heights=c(.1, 1, .1))
