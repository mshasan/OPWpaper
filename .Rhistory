test = bottomly$stat
pval = bottomly$pvalue
filter = bottomly$baseMean
Data <- tibble(test, pval, filter)	# data of filter covariate and pvlaues
bc <- boxcox(filter ~ test)
trans <- bc$x[which.max(bc$y)]
model_bot <- lm(filter^trans ~ test)
summary(filter^trans)
sd(filter^trans)
opw
load("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/bottomly_data_example.RDATA")
load("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/proteomics_data_example.RDATA")
p_fdr_bot <- ggplot(rej_mat_bot_FDR2, aes(x = alpha, y = value, group = variable,
colour = variable)) +
geom_line(aes(linetype = variable), size = 1.5) +
labs(x = expression(bold(paste("Nominal ",alpha))), y = "Discoveries", title = "Bottomly") +
theme(legend.title = element_blank(), legend.position="bottom")
p_fdr_prot <- ggplot(rej_mat_prot_FDR2, aes(x = alpha, y = value, group = variable,
colour = variable)) +
geom_line(aes(linetype = variable), size = 1.5) +
labs(x = expression(bold(paste("Nominal ",alpha))), y = "Discoveries", title = "Proteomics") +
theme(legend.position="none")
# extract the legend from one of the plots
legend_example <- get_legend(p_fdr_bot + theme(legend.direction="horizontal",
legend.position="bottom"))
p_fdr_bot = p_fdr_bot + theme(legend.position="none")
p_fdr_prot = p_fdr_prot + theme(legend.position="none")
# arrange the plots
p = plot_grid(p_fdr_bot, p_fdr_prot, nrow=1, labels = "auto", align='hv')
plot_grid(p, legend_example, ncol = 1, rel_heights = c(1,.1))
plot_grid(p, legend_example, ncol = 1, rel_heights = c(1,.1))
load("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_probRel_filterVstest_effect.RDATA")
datRelaion1 <- data.frame(ranks, prob0_ed2, prob1_ed2, prob_test0_cor.2_ed2, prob_test1_cor.2_ed2)
datRelaion1
library(OPWpaper)
setwd("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1")
proteomics_file <- system.file("extdata/real_data","science_signaling.csv", package = "IHWpaper")
proteomics_df <- read.csv(proteomics_file, stringsAsFactors = F)
proteomics_df$pvalue <- rank(proteomics_df$p1, ties.method="first")*proteomics_df$p1/nrow(proteomics_df)
proteomics_df$test = qnorm(proteomics_df$pvalue, lower.tail = F)
names(proteomics_df)
test = proteomics_df$test
test[test == -Inf] <- NA
test[test == Inf] <- NA
pval = proteomics_df$pvalue
filter = proteomics_df$X..peptides
bc2 <- boxcox(filter ~ test)
trans2 <- bc2$x[which.max(bc2$y)]
model_prot <- lm(filter^trans2 ~ test)
summary(filter^trans2)
sd(filter^trans2)
tools::showNonASCII(readLines("ranks_probability.Rmd"))
getwd()
set("C:/Users/Apu-Jerrica/Google Drive/My R Packages/OPWpaper/vignettes")
setwd("C:/Users/Apu-Jerrica/Google Drive/My R Packages/OPWpaper/vignettes")
tools::showNonASCII(readLines("ranks_probability.Rmd"))
tools::showNonASCII(readLines("ranks_probability.Rmd"))
library(OPWpaper)
devtools::use_data(simu_prob_rank_givenEffect.RDATA)
data("simu_prob_rank_givenEffect.RDATA")
library(OPWpaper)
dat00
devtools::load_all()
dat00
ranksProb_dat <- system.file("simulations/results/simu_prob_rank_givenEffect.RDATA",
package = "OPWpaper")
ranksProb_dat
nchar(ranksProb_dat)
.libPaths()
load(ranksProb_dat)
nullSize <- c(20, 50, 75, 90, 99)
lapply(nullSize, ranksProb_compare_plots, effectType = "continuous")
ranksProb_dat <- system.file("simulations/results/", package = "OPWpaper")
setwd(ranksProb_dat)
load(simu_prob_rank_givenEffect.RDATA)
load("simu_prob_rank_givenEffect.RDATA")
dat00
prob_50_0_cont
library(OPWpaper)
ranksProb_compare_plots
ranksProb_compare_plots <- function(m0, effectType = c("binary", "continuous"))
{
effType <- ifelse(effectType == "binary", "_bin", "_cont")
prow <- list()
for(j in 1:3)
{
e.one <- j-1
# make text into varriable name
probData_com <- eval(parse(text=paste0("prob_",m0,"_",e.one, effType)))
g <- list()
for(i in 1:3)
{
probData <- probData_com[[i]]
colnames(probData) <- c("ranks", "SH0","SH1","EH0","EH1","AH0","AH1")
dat <- melt(probData, id.var = "ranks")
ey_val <- ifelse(effectType == "binary", i-1,
ifelse(i==1, 0, paste0("U(",i-2,", ", i-1,")")))
eySm <- ifelse(effectType == "binary", "ey = ", "ey ~ ")
g[[i]] = ggplot(dat, aes(x = dat$ranks, y = dat$value, group = dat$variable,
colour = dat$variable)) +
geom_line(aes(linetype = dat$variable), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", size = 20,
subtitle = paste0(eySm, ey_val, ", e.one = ", e.one)) +
theme(legend.title = element_blank(),
axis.title.x = element_text(size = rel(.7)),
axis.title.y = element_text(size = rel(.7)))
}
# extract the legend from one of the plots
legend <- get_legend(g[[1]] + theme(legend.direction="horizontal",
legend.position="bottom"))
# arrange the three plots in a single row
prow[[j]] <- plot_grid(g[[1]] + theme(legend.position="none"),
g[[2]] + theme(legend.position="none"),
g[[3]] + theme(legend.position="none"),
align = 'hv', nrow = 1, labels = letters[(3*j-3+1):(3*j)])
}
effType2 <- ifelse(effectType == "binary", "Binary: m0 = ", "Continuous: m0 = ")
pp = plot_grid(prow[[1]], prow[[2]], prow[[3]], nrow = 3, align = 'hv')
# now add the title
title <- ggdraw() + draw_label(paste(effType2, m0, ", m1 = ", 100-m0))
plots = plot_grid(title, pp, legend, ncol = 1, rel_heights=c(0.1, 1, .1))
return(list(plots))
}
lapply(20, ranksProb_compare_plots, effectType = "continuous")
library(ggplot2)
library(grid)
library(gridExtra)      # for multiplots in the same page
library(xtable)
library(reshape2)       # library for the melt function
library(cowplot)        # plot_grid function
lapply(20, ranksProb_compare_plots, effectType = "continuous")
ranksProb_compare_plots <- function(m0, effectType = c("binary", "continuous"))
{
effType <- ifelse(effectType == "binary", "_bin", "_cont")
prow <- list()
for(j in 1:3)
{
e.one <- j-1
# make text into varriable name
probData_com <- eval(parse(text=paste0("prob_",m0,"_",e.one, effType)))
g <- list()
for(i in 1:3)
{
probData <- probData_com[[i]]
colnames(probData) <- c("ranks", "SH0","SH1","EH0","EH1","AH0","AH1")
dat <- melt(probData, id.var = "ranks")
ey_val <- ifelse(effectType == "binary", i-1,
ifelse(i==1, 0, paste0("U(",i-2,", ", i-1,")")))
eySm <- ifelse(effectType == "binary", "ey = ", "ey ~ ")
g[[i]] = ggplot(dat, aes(x = ranks, y = value, group = variable,
colour = variable)) +
geom_line(aes(linetype = variable), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", size = 20,
subtitle = paste0(eySm, ey_val, ", e.one = ", e.one)) +
theme(legend.title = element_blank(),
axis.title.x = element_text(size = rel(.7)),
axis.title.y = element_text(size = rel(.7)))
}
# extract the legend from one of the plots
legend <- get_legend(g[[1]] + theme(legend.direction="horizontal",
legend.position="bottom"))
# arrange the three plots in a single row
prow[[j]] <- plot_grid(g[[1]] + theme(legend.position="none"),
g[[2]] + theme(legend.position="none"),
g[[3]] + theme(legend.position="none"),
align = 'hv', nrow = 1, labels = letters[(3*j-3+1):(3*j)])
}
effType2 <- ifelse(effectType == "binary", "Binary: m0 = ", "Continuous: m0 = ")
pp = plot_grid(prow[[1]], prow[[2]], prow[[3]], nrow = 3, align = 'hv')
# now add the title
title <- ggdraw() + draw_label(paste(effType2, m0, ", m1 = ", 100-m0))
plots = plot_grid(title, pp, legend, ncol = 1, rel_heights=c(0.1, 1, .1))
return(list(plots))
}
lapply(20, ranksProb_compare_plots, effectType = "continuous")
library(OPWpaper)
getwd()
ranksProb <- read.csv("ranksProb_byEffect_m10000.csv", h = TRUE)
ranksWeight <- read.csv("Weight_byEffect_cont_m10000.csv",h = TRUE)
prob_weight_plots(ey_index = c(7, 17, 27, 37), null_index = c(14, 17, 19),
m = 10000, ey = 2, null = 50, prob = ranksProb,
weight = ranksWeight)
prob_weight_plots(ey_index = c(7, 17, 27, 37), null_index = c(14, 17, 19),
m = 10000, ey = 2, null = 50, prob = ranksProb,
weight = ranksWeight)
setwd("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1")
ranksProb <- read.csv("ranksProb_byEffect_m10000.csv", h = TRUE)
ranksWeight <- read.csv("Weight_byEffect_cont_m10000.csv",h = TRUE)
prob_weight_plots(ey_index = c(7, 17, 27, 37), null_index = c(14, 17, 19),
m = 10000, ey = 2, null = 50, prob = ranksProb,
weight = ranksWeight)
prob_weight_plots(ey_index = c(7, 17, 27, 37), null_index = c(14, 17, 19),
m = 10000, ey = 2, null = 50, prob = ranksProb,
weight = ranksWeight)
dev.off()
system.file("simulations/results/ranksProb_byEffect_m10000.csv",
package = "OPWpaper")
system.file("simulations/results/Weight_byEffect_cont_m10000.csv",
package = "OPWpaper")
knitr::opts_chunk$set(fig.width = 8, fig.height = 8)
knitr::opts_chunk$set(tidy = FALSE, cache = TRUE, autodep = TRUE)
ranksProb_dat <- system.file("simulations/results/ranksProb_byEffect_m10000.csv",
package = "OPWpaper")
weight_dat <- system.file("simulations/results/Weight_byEffect_cont_m10000.csv",
package = "OPWpaper")
m = 10000
ranksProb <- read.csv(ranksProb_dat, h = TRUE)
ranksWeight <- read.csv(weight_dat, h = TRUE)
load("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_fwer.RDATA")
alphaVal = seq(.01, .1, .02)
datError <- data.frame(alphaVal, t(fwer_by_alpha))
colnames(datError) <- c("alpha","BON","PRO_bin","PRO_cont", "IHW")
datError2 <- melt(datError, id.var="alpha")
#panel_d =
ggplot(datError2, aes(x = alpha, y = value, col=variable)) +
geom_line(size=1.5) +
geom_abline(linetype="dashed") +
xlab(expression(bold(paste("Nominal ",alpha)))) +
ylab("FWER")+
scale_x_continuous(limits = c(0.01,0.1), breaks=seq(0.01,0.09,length=5)) +
#ylim(0,0.9) +
theme(legend.title = element_blank())+
theme(axis.title = element_text(face="bold"))+
theme(panel.background = element_rect(fill = 'white', colour = 'black'))
fwer_by_alpha <- matrix(apply(fwer_mat, 1, mean), nrow = 4, byrow = FALSE)
alphaVal = seq(.01, .1, .02)
datError <- data.frame(alphaVal, t(fwer_by_alpha))
colnames(datError) <- c("alpha","BON","PRO_bin","PRO_cont", "IHW")
datError2 <- melt(datError, id.var="alpha")
#panel_d =
ggplot(datError2, aes(x = alpha, y = value, col=variable)) +
geom_line(size=1.5) +
geom_abline(linetype="dashed") +
xlab(expression(bold(paste("Nominal ",alpha)))) +
ylab("FWER")+
scale_x_continuous(limits = c(0.01,0.1), breaks=seq(0.01,0.09,length=5)) +
#ylim(0,0.9) +
theme(legend.title = element_blank())+
theme(axis.title = element_text(face="bold"))+
theme(panel.background = element_rect(fill = 'white', colour = 'black'))
#df = data.frame(colour=mycolours, last_vals=c(0.08,   0.085,   0.09), label=c("BON","PRO_bin","PRO_cont"))
#panel_d <- pretty_legend(panel_d, df, .092)
#panel_d
panel_d =    ggplot(datError2, aes(x = alpha, y = value, col=variable)) +
geom_line(size=1.5) +
geom_abline(linetype="dashed") +
xlab(expression(bold(paste("Nominal ",alpha)))) +
ylab("FWER")+
scale_x_continuous(limits = c(0.01,0.1), breaks=seq(0.01,0.09,length=5)) +
#ylim(0,0.9) +
theme(legend.title = element_blank())+
theme(axis.title = element_text(face="bold"))+
theme(panel.background = element_rect(fill = 'white', colour = 'black'))
panel_d
bottomly <- system.file("real_data_examples/results", package = "OPWpaper")
setwd(bottomly)
bottomly <- system.file("real_data_examples/results", package = "OPWpaper")
setwd(bottomly)
bottomly
system.file("real_data_examples/results", package = "OPWpaper")
system.file("simulations/results", package = "OPWpaper")
C:\Users\Apu-Jerrica\Google Drive\My R Packages\OPWpaper\inst\real_data_examples\results````
.libPaths()
ranksProb_compare_plots <- function(m0, effectType = c("binary", "continuous"))
{
effType <- ifelse(effectType == "binary", "_bin", "_cont")
prow <- list()
for(j in 1:3)
{
e.one <- j-1
# make text into varriable name
probData_com <- eval(parse(text=paste0("prob_",m0,"_",e.one, effType)))
g <- list()
for(i in 1:3)
{
probData <- probData_com[[i]]
colnames(probData) <- c("ranks", "SH0","SH1","EH0","EH1","AH0","AH1")
dat <- melt(probData, id.var = "ranks")
ey_val <- ifelse(effectType == "binary", i-1,
ifelse(i==1, 0, paste0("U(",i-2,", ", i-1,")")))
eySm <- ifelse(effectType == "binary", "ey = ", "ey ~ ")
g[[i]] = ggplot(dat, aes(x = dat$ranks, y = dat$value, group = dat$variable,
colour = dat$variable)) +
geom_line(aes(linetype = dat$variable), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", size = 20,
subtitle = paste0(eySm, ey_val, ", e.one = ", e.one)) +
theme(legend.title = element_blank(),
axis.title.x = element_text(size = rel(.7)),
axis.title.y = element_text(size = rel(.7)))
}
# extract the legend from one of the plots
legend <- get_legend(g[[1]] + theme(legend.direction="horizontal",
legend.position="bottom"))
# arrange the three plots in a single row
prow[[j]] <- plot_grid(g[[1]] + theme(legend.position="none"),
g[[2]] + theme(legend.position="none"),
g[[3]] + theme(legend.position="none"),
align = 'hv', nrow = 1, labels = letters[(3*j-3+1):(3*j)])
}
effType2 <- ifelse(effectType == "binary", "Binary: m0 = ", "Continuous: m0 = ")
pp = plot_grid(prow[[1]], prow[[2]], prow[[3]], nrow = 3, align = 'hv')
# now add the title
title <- ggdraw() + draw_label(paste(effType2, m0, ", m1 = ", 100-m0))
plots = plot_grid(title, pp, legend, ncol = 1, rel_heights=c(0.1, 1, .1))
return(list(plots))
}
setwd("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1")
load("simu_prob_rank_givenEffect.RDATA")
lapply(20, ranksProb_compare_plots, effectType = "continuous")
probData_com
library(BiocCheck)
library("BiocCheck")
BiocCheck("OPWpaper")
getwd
getwd()
BiocCheck("C:/Users/Apu-Jerrica/Google Drive/My R Packages/OPWpaper")
.libPaths()
BiocCheck("C:/Users/Apu-Jerrica/Documents/R/win-library/3.4")
BiocCheck("C:/Users/Apu-Jerrica/Documents/R/win-library/3.4/OPWpaper")
library(OPWpaper)
?system.file
library(OPWpaper)
library(OPWpaper)
library(OPWpaper)
library(OPWpaper)
library(OPWpaper)
library(OPWpaper)
airway
UScrime
library(MASS)
UScrime
Weight_byEffect_cont_m10000
library(devtools)
use_data("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_ranksProb_byEffect", OPWpaper)
?use_data
use_data("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_ranksProb_byEffect", pkg="OPWpaper")
getwd()
use_data("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_ranksProb_byEffect")
use_data("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_ranksProb_byEffect.RDATA")
use_data("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1/simu_ranksProb_byEffect.RData")
x <- sample(1000)
use_data(x)
ranksProb <- read.csv("ranksProb_byEffect_m10000.csv", h = TRUE)
ranksProb_dat <- system.file("simulations/results/ranksProb_byEffect_m10000.csv",
package = "OPWpaper")
use_data(ranksProb_dat)
weight_dat_cont <- system.file("simulations/results/Weight_byEffect_cont_m10000.csv",
package = "OPWpaper")
use_data(weight_dat_cont)
weight_dat_bin <- system.file("simulations/results/Weight_byEffect_bin_m10000.csv",
package = "OPWpaper")
use_data(weight_dat_bin)
?dput
ranksProb_dat
ranksProb <- read.csv(ranksProb_dat, h = TRUE)
ranksProb
use_data(ranksProb)
ranksWeight <- read.csv(weight_dat, h = TRUE)
weight_dat <- system.file("simulations/results/Weight_byEffect_cont_m10000.csv",
package = "OPWpaper")
ranksWeight_cont <- read.csv(weight_dat, h = TRUE)
use_data(ranksWeight_cont)
weight_dat <- system.file("simulations/results/Weight_byEffect_bin_m10000.csv",
package = "OPWpaper")
ranksWeight_bin <- read.csv(weight_dat, h = TRUE)
use_data(ranksWeight_bin)
ranksWeight_bin
rm(list=ls())
ranksWeight_cont
library(OPWpaper)
ranksWeight_cont
ranksProb
ranksProb.rda
bottomly_count_table <- read.table("bottomly_count_table.txt",h=T)
setwd("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1")
bottomly_count_table <- read.table("bottomly_count_table.txt",h=T)
bottomly_phenodata <- read.table("bottomly_phenodata.txt",h=T)
countData <- as.matrix(bottomly_count_table[,-1])		# counts
condition <- factor(bottomly_phenodata[,3])				# strain as factor
dds <- DESeqDataSetFromMatrix(countData, DataFrame(condition), ~ condition)
dds <- DESeq(dds)
library(DESeq2)     # RNA-seq analysis
getwd()
setwd("C:/Users/mshasan/Dropbox/My R packages/OPWpaper")
bottomly_count_table
use_data_raw(C:/Users/mshasan/Dropbox/My R packages/OPWpaper)
use_data_raw(bottomly_count_table)
getwd()
use_data_raw("bottomly_count_table")
use_data_raw(bottomly_count_table)
?use_data_raw
bottomly_count_table <- read.table("bottomly_count_table.txt",h=T)
setwd("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1")
setwd("C:/Users/mshasan/Dropbox/My R packages/OPWpaper")
use_data_raw()
system.file()
library(OPWpaper)
ranksProb
library(OPWpaper)
library(OPWpaper)
getwd()
load(system.file("simulations/results", "ranksProb_byEffect_m10000.csv",
package = "OPWpaper"))
ranksProb <- read.csv(system.file("simulations/results/ranksProb_byEffect_m10000.csv",
package = "OPWpaper"), h = TRUE)
ranksProb <- read.csv(system.file("simulations/results/ranksProb_byEffect_m10000.csv",
package = "OPWpaper"), h = TRUE)
system.file("simulations/results/ranksProb_byEffect_m10000.csv",
package = "OPWpaper")
system.file("simulations/results/ranksProb_byEffect_m10000.csv",
package = "OPWpaper")
system.file()
library(OPWpaper)
library(OPWpaper)
use_testthat()
use_testthat()
?nice_plots
?nice_plots
library(OPWpaper)
?fwerPowerFdrPower
?fwerPowerFdrPower
library(OPWpaper)
?roeder_wasserman_weight
?roeder_wasserman_weight
library(OPWpaper)
?prob_weight_plots
?prob_weight_plots
library(OPWpaper)
?ranksProb_compare
?ranksProb_compare
library(OPWpaper)
?ranksProb_compare
library(OPWpaper)
?probRel_CovVsTest_effect
?probRel_CovVsTest_effect
?ranksProb_byEffect
library(OPWpaper)
?ranksProb_byEffect
?runif_by_mean
?runif_by_mean
library(OPWpaper)
?simu_fwer
library(OPWpaper)
?test_by_block
library(OPWpaper)
?weight_byEffect_bin
library(OPWpaper)
?weight_byEffect_cont
?weightSum_by_c
library(OPWpaper)
library(OPWpaper)
library(OPWpaper)
library(OPWpaper)
library(OPWpaper)
?use_build_ignore
use_build_ignore("ranks_probability.html")
use_build_ignore("ranks_probability.html", pkg = OPWpaper)
use_build_ignore("ranks_probability.html", pkg = "OPWpaper")
getwd()
knitr::opts_chunk$set(fig.width = 8.5, fig.height = 4)
knitr::opts_chunk$set(tidy = FALSE, cache = FALSE, autodep = TRUE)
library(OPWpaper)
library(ggplot2)
library(reshape2)       # library for the melt function
library(cowplot)        # plot_grid function
load(system.file("simulations/results", "simu_fwer.RDATA",
package = "OPWpaper"), envir = environment())
fwer_mat
library(OPWpaper)
library(devtools)
use_build_ignore(ranks_probability.html)
use_build_ignore("ranks_probability.html")
use_build_ignore("ranks_probability.R")
use_build_ignore("Power.html")
use_build_ignore("Power.R")
use_build_ignore("ranksProb_weight.html")
use_build_ignore("ranksProb_weight.R")
use_build_ignore("FWER_and_FDR.html")
use_build_ignore("FWER_and_FDR.R")
use_build_ignore("probRel_CovVsTest_effect.html")
use_build_ignore("probRel_CovVsTest_effect.R")
use_build_ignore("real_data_examples.html")
use_build_ignore("real_data_examples.R")
library(OPWpaper)
use_travis()
library(OPWpaper)
knitr::opts_chunk$set(fig.width = 8.5, fig.height = 7)
knitr::opts_chunk$set(tidy = FALSE, cache = FALSE, autodep = TRUE)
library(OPWpaper)
library(IHWpaper)
library(ggplot2)
library(reshape2)       # library for the melt function
library(cowplot)        # plot_grid function
library(dplyr)          # for %>%
getwd()
library(BiocCheck)
library("BiocCheck")
BiocCheck()
BiocCheck("OPWpaper")
BiocCheck("C:/Users/Apu-Jerrica/Dropbox/Dropbox/My R packages/OPWpaper")
BiocCheck("C:/Users/Apu-Jerrica/Dropbox/Dropbox/My R packages")
BiocCheck("C:/Users/Apu-Jerrica/Dropbox/Dropbox/My R packages/OPWpaper")
build()
library(devtools)
build()
BiocCheck("OPWpaper_0.99.1.tar")
BiocCheck("C:/Users/Apu-Jerrica/Dropbox/Dropbox/My R packages/OPWpaper_0.99.1.tar")
load_all()
simu_fwer.RDATA
bottomly_count_table.txt
read.table("bottomly_count_table.txt")
getwd
