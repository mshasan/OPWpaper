% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weight_byEffect_bin.R
\name{weight_byEffect_bin}
\alias{weight_byEffect_bin}
\title{Weight for different effect sizes in binary case}
\usage{
weight_byEffect_bin(i, alpha, null, m, tail = 1L, delInterval,
  filterEffectVec, datByNull)
}
\arguments{
\item{i}{i-th effect size}

\item{alpha}{significance level}

\item{null}{proportion of true true null tests}

\item{m}{total number of hypotheis test}

\item{tail}{one-tailed or two-tailed hypothesis test}

\item{delInterval}{interval between the \code{delta} values of a sequence.}

\item{filterEffectVec}{a vector of filter effect sizes
Note that, \code{delta} is a LaGrange multiplier, necessary to normalize the weight}

\item{datByNull}{a matrix of ranks pobabilities each column corresponds to
an effect size}
}
\value{
a matrix of weights each column corresponds to an effect size
}
\description{
Compute weight from the probability of the rank given the effect
size for different effect sizes in a binary effect size situation
}
\details{
This function compute the weights in a binary settings by applying
the ranks probabilities for the different effect sizes. It applies the function
function \code{weight_binary} from the package 'OPWeight' to
comute the weights from a probability matirx.
}
\examples{
# vector of effect sizes
filterEffectVec <- c(1, 1.5, 2)

# compute probability matrix
ranksProb_byEffect <- sapply(1:length(filterEffectVec), ranksProb_byEffect,
             null = .9, m = 100, filterEffectVec = filterEffectVec)

# compute weights
weightByEffect <- sapply(1:length(filterEffectVec), weight_byEffect_bin,
                   alpha = .05, null = .9, m = 100, delInterval = .0001,
                   filterEffectVec = filterEffectVec,
                   datByNull = ranksProb_byEffect)

}
\seealso{
\code{\link{ranksProb_byEffect}}
\code{\link{weight_binary}}
}
\author{
Mohamad S. Hasan, mshasan@uga.edu
}
